{"version":3,"sources":["components/TagIndexPage.module.css","components/TagPage.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/TagIndexPage.js","components/TagPage.js","routes/tags.js"],"names":["module","exports","TagIndexPage","TagPage","_arrayLikeToArray","arr","len","length","i","arr2","Array","_toConsumableArray","isArray","_arrayWithoutHoles","iter","Symbol","iterator","Object","from","_iterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","props","React","createElement","className","styles","tags","map","tag","key","href","Link","count","_ref","blogRoot","routes","route","url","ArticleSummary","_regeneratorRuntime","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","value","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","crawlRoutes","_x","_crawlRoutes","apply","arguments","_asyncToGenerator","_callee4","root","_yield$crawl","paths","_context4","cache","crawl","crawlingRoutes","urls","tagRoutes","compose","withContext","req","_objectSpread","tagsRoot","mountpath","withCrawlerPatterns","/:tag","_tag","_callee","_context","t0","getAvailableTagsFromRoutes","t1","_x2","_x3","mount","/","title","getView","_getView","_callee2","_context2","fromPairs","toLowerCase","data","join","_x4","_x5","getTitle","params","_getView2","_callee3","lowerCaseTag","_context3","find","metaTag","_x6","_x7","Set","concat"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,aAAA,wDCAlBF,EAAAC,QAAA,CAAkBE,QAAA,2DCDH,SAAAC,EAAAC,EAAAC,IACf,MAAAA,KAAAD,EAAAE,UAAAD,EAAAD,EAAAE,QAEA,QAAAC,EAAA,EAAAC,EAAA,IAAAC,MAAAJ,GAAwCE,EAAAF,EAASE,IACjDC,EAAAD,GAAAH,EAAAG,GAGA,OAAAC,ECHe,SAAAE,EAAAN,GACf,OCJe,SAAAA,GACf,GAAAK,MAAAE,QAAAP,GAAA,OAAiCD,EAAgBC,GDGxCQ,CAAiBR,IELX,SAAAS,GACf,wBAAAC,eAAAC,YAAAC,OAAAH,GAAA,OAAAJ,MAAAQ,KAAAJ,GFImCK,CAAed,IGJnC,SAAAe,EAAAC,GACf,GAAAD,EAAA,CACA,qBAAAA,EAAA,OAAoChB,EAAgBgB,EAAAC,GACpD,IAAAC,EAAAL,OAAAM,UAAAC,SAAAC,KAAAL,GAAAM,MAAA,MAEA,MADA,WAAAJ,GAAAF,EAAAO,cAAAL,EAAAF,EAAAO,YAAAC,MACA,QAAAN,GAAA,QAAAA,EAAAZ,MAAAQ,KAAAI,GACA,cAAAA,GAAA,2CAAAO,KAAAP,GAAsFlB,EAAgBgB,EAAAC,QAAtG,GHF2DS,CAA0BzB,IILtE,WACf,UAAA0B,UAAA,wIJI8FC,yFKc/E9B,MAff,SAAsB+B,GACpB,OACEC,IAAAC,cAAA,OAAKC,UAAWC,IAAOnC,cACrBgC,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,UACGF,EAAMK,KAAKC,IAAI,SAAAC,GAAG,OACjBN,IAAAC,cAAA,MAAIM,IAAKD,EAAIE,MACXR,IAAAC,cAACQ,OAAI,CAACD,KAAMF,EAAIE,MAAOF,EAAIZ,KAAK,KAAGY,EAAII,MAAM,oCCQ1CzC,MAff,SAAgB0C,GAA6B,IAA1BC,EAAQD,EAARC,SAAUlB,EAAIiB,EAAJjB,KAAMmB,EAAMF,EAANE,OACjC,OACEb,IAAAC,cAAA,OAAKC,UAAWC,IAAOlC,SACrB+B,IAAAC,cAAA,UAAKP,EAAK,UACVM,IAAAC,cAAA,UACGY,EAAOR,IAAI,SAAAS,GAAK,OACfd,IAAAC,cAAA,MAAIM,IAAKO,EAAMC,IAAIP,MACjBR,IAAAC,cAACe,IAAc,CAACJ,SAAUA,EAAUE,MAAOA,+BCVvDG,EAAA,kBAAAlD,GAAA,IAAAA,EAAA,GAAAmD,EAAAnC,OAAAM,UAAA8B,EAAAD,EAAAE,eAAAC,EAAAtC,OAAAsC,gBAAA,SAAAC,EAAAf,EAAAgB,GAAAD,EAAAf,GAAAgB,EAAAC,OAAAC,EAAA,mBAAA5C,cAAA,GAAA6C,EAAAD,EAAA3C,UAAA,aAAA6C,EAAAF,EAAAG,eAAA,kBAAAC,EAAAJ,EAAAK,aAAA,yBAAAC,EAAAT,EAAAf,EAAAiB,GAAA,OAAAzC,OAAAsC,eAAAC,EAAAf,EAAA,CAAAiB,QAAAQ,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAZ,EAAAf,GAAA,IAAAwB,EAAA,aAAAI,GAAAJ,EAAA,SAAAT,EAAAf,EAAAiB,GAAA,OAAAF,EAAAf,GAAAiB,GAAA,SAAAY,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAAjD,qBAAAqD,EAAAJ,EAAAI,EAAAC,EAAA5D,OAAA6D,OAAAH,EAAApD,WAAAwD,EAAA,IAAAC,EAAAN,GAAA,WAAAnB,EAAAsB,EAAA,WAAAnB,MAAAuB,EAAAV,EAAAE,EAAAM,KAAAF,EAAA,SAAAK,EAAAC,EAAA3B,EAAA4B,GAAA,WAAAC,KAAA,SAAAD,IAAAD,EAAA1D,KAAA+B,EAAA4B,IAAA,MAAAf,GAAA,OAAAgB,KAAA,QAAAD,IAAAf,IAAApE,EAAAqE,OAAA,IAAAgB,EAAA,YAAAV,KAAA,SAAAW,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAAxB,EAAAwB,EAAA7B,EAAA,kBAAA8B,OAAA,IAAAC,EAAA1E,OAAA2E,eAAAC,EAAAF,OAAAG,EAAA,MAAAD,OAAAzC,GAAAC,EAAA5B,KAAAoE,EAAAjC,KAAA6B,EAAAI,GAAA,IAAAE,EAAAP,EAAAjE,UAAAqD,EAAArD,UAAAN,OAAA6D,OAAAW,GAAA,SAAAO,EAAAzE,GAAA,0BAAA0E,QAAA,SAAAC,GAAAjC,EAAA1C,EAAA2E,EAAA,SAAAd,GAAA,OAAAM,KAAAS,QAAAD,EAAAd,OAAA,SAAAgB,EAAAvB,EAAAwB,GAAA,IAAAC,EAAA/C,EAAAmC,KAAA,WAAAhC,MAAA,SAAAwC,EAAAd,GAAA,SAAAmB,IAAA,WAAAF,EAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAd,EAAAoB,EAAAC,GAAA,IAAAE,EAAAzB,EAAAL,EAAAqB,GAAArB,EAAAO,GAAA,aAAAuB,EAAAtB,KAAA,KAAAuB,EAAAD,EAAAvB,IAAA1B,EAAAkD,EAAAlD,MAAA,OAAAA,GAAA,iBAAAA,GAAAL,EAAA5B,KAAAiC,EAAA,WAAA2C,EAAAG,QAAA9C,EAAAmD,SAAAC,KAAA,SAAApD,GAAAgD,EAAA,OAAAhD,EAAA8C,EAAAC,IAAA,SAAApC,GAAAqC,EAAA,QAAArC,EAAAmC,EAAAC,KAAAJ,EAAAG,QAAA9C,GAAAoD,KAAA,SAAAC,GAAAH,EAAAlD,MAAAqD,EAAAP,EAAAI,IAAA,SAAAI,GAAA,OAAAN,EAAA,QAAAM,EAAAR,EAAAC,OAAAE,EAAAvB,KAAAsB,CAAAR,EAAAd,EAAAoB,EAAAC,KAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAAtB,EAAAV,EAAAE,EAAAM,GAAA,IAAAkC,EAAA,iCAAAf,EAAAd,GAAA,iBAAA6B,EAAA,UAAAC,MAAA,iDAAAD,EAAA,cAAAf,EAAA,MAAAd,EAAA,OAAA+B,IAAA,IAAApC,EAAAmB,SAAAnB,EAAAK,QAAA,KAAAgC,EAAArC,EAAAqC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAArC,GAAA,GAAAsC,EAAA,IAAAA,IAAA/B,EAAA,gBAAA+B,GAAA,YAAAtC,EAAAmB,OAAAnB,EAAAwC,KAAAxC,EAAAyC,MAAAzC,EAAAK,SAAA,aAAAL,EAAAmB,OAAA,uBAAAe,EAAA,MAAAA,EAAA,YAAAlC,EAAAK,IAAAL,EAAA0C,kBAAA1C,EAAAK,SAAA,WAAAL,EAAAmB,QAAAnB,EAAA2C,OAAA,SAAA3C,EAAAK,KAAA6B,EAAA,gBAAAN,EAAAzB,EAAAX,EAAAE,EAAAM,GAAA,cAAA4B,EAAAtB,KAAA,IAAA4B,EAAAlC,EAAA4C,KAAA,6BAAAhB,EAAAvB,MAAAE,EAAA,gBAAA5B,MAAAiD,EAAAvB,IAAAuC,KAAA5C,EAAA4C,MAAA,UAAAhB,EAAAtB,OAAA4B,EAAA,YAAAlC,EAAAmB,OAAA,QAAAnB,EAAAK,IAAAuB,EAAAvB,OAAA,SAAAkC,EAAAF,EAAArC,GAAA,IAAA6C,EAAA7C,EAAAmB,SAAAkB,EAAApG,SAAA4G,GAAA,QAAAC,IAAA3B,EAAA,OAAAnB,EAAAqC,SAAA,eAAAQ,GAAAR,EAAApG,SAAA8G,SAAA/C,EAAAmB,OAAA,SAAAnB,EAAAK,SAAAyC,EAAAP,EAAAF,EAAArC,GAAA,UAAAA,EAAAmB,SAAA,WAAA0B,IAAA7C,EAAAmB,OAAA,QAAAnB,EAAAK,IAAA,IAAArD,UAAA,oCAAA6F,EAAA,aAAAtC,EAAA,IAAAqB,EAAAzB,EAAAgB,EAAAkB,EAAApG,SAAA+D,EAAAK,KAAA,aAAAuB,EAAAtB,KAAA,OAAAN,EAAAmB,OAAA,QAAAnB,EAAAK,IAAAuB,EAAAvB,IAAAL,EAAAqC,SAAA,KAAA9B,EAAA,IAAAyC,EAAApB,EAAAvB,IAAA,OAAA2C,IAAAJ,MAAA5C,EAAAqC,EAAAY,YAAAD,EAAArE,MAAAqB,EAAAkD,KAAAb,EAAAc,QAAA,WAAAnD,EAAAmB,SAAAnB,EAAAmB,OAAA,OAAAnB,EAAAK,SAAAyC,GAAA9C,EAAAqC,SAAA,KAAA9B,GAAAyC,GAAAhD,EAAAmB,OAAA,QAAAnB,EAAAK,IAAA,IAAArD,UAAA,oCAAAgD,EAAAqC,SAAA,KAAA9B,GAAA,SAAA6C,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,IAAA1C,KAAAgD,WAAAC,KAAAN,GAAA,SAAAO,EAAAP,GAAA,IAAA1B,EAAA0B,EAAAQ,YAAA,GAAAlC,EAAAtB,KAAA,gBAAAsB,EAAAvB,IAAAiD,EAAAQ,WAAAlC,EAAA,SAAA3B,EAAAN,GAAAgB,KAAAgD,WAAA,EAAAJ,OAAA,SAAA5D,EAAAuB,QAAAkC,EAAAzC,WAAAoD,OAAA,YAAAhD,EAAAiD,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAAnF,GAAA,GAAAoF,EAAA,OAAAA,EAAAvH,KAAAsH,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAE,MAAAF,EAAAxI,QAAA,KAAAC,GAAA,EAAAyH,EAAA,SAAAA,IAAA,OAAAzH,EAAAuI,EAAAxI,QAAA,GAAA8C,EAAA5B,KAAAsH,EAAAvI,GAAA,OAAAyH,EAAAvE,MAAAqF,EAAAvI,GAAAyH,EAAAN,MAAA,EAAAM,EAAA,OAAAA,EAAAvE,WAAAmE,EAAAI,EAAAN,MAAA,EAAAM,GAAA,OAAAA,UAAA,OAAAA,KAAAd,GAAA,SAAAA,IAAA,OAAAzD,WAAAmE,EAAAF,MAAA,UAAApC,EAAAhE,UAAAiE,EAAAjC,EAAAwC,EAAA,eAAArC,MAAA8B,EAAArB,cAAA,IAAAZ,EAAAiC,EAAA,eAAA9B,MAAA6B,EAAApB,cAAA,IAAAoB,EAAA2D,YAAAjF,EAAAuB,EAAAzB,EAAA,qBAAA9D,EAAAkJ,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAzH,YAAA,QAAA0H,QAAA9D,GAAA,uBAAA8D,EAAAH,aAAAG,EAAAzH,QAAA3B,EAAAqJ,KAAA,SAAAF,GAAA,OAAAnI,OAAAsI,eAAAtI,OAAAsI,eAAAH,EAAA5D,IAAA4D,EAAAI,UAAAhE,EAAAvB,EAAAmF,EAAArF,EAAA,sBAAAqF,EAAA7H,UAAAN,OAAA6D,OAAAiB,GAAAqD,GAAAnJ,EAAAwJ,MAAA,SAAArE,GAAA,OAAAyB,QAAAzB,IAAAY,EAAAI,EAAA7E,WAAA0C,EAAAmC,EAAA7E,UAAAsC,EAAA,kBAAA6B,OAAAzF,EAAAmG,gBAAAnG,EAAAyJ,MAAA,SAAAnF,EAAAC,EAAAC,EAAAC,EAAA2B,QAAA,IAAAA,MAAAsD,SAAA,IAAA7I,EAAA,IAAAsF,EAAA9B,EAAAC,EAAAC,EAAAC,EAAAC,GAAA2B,GAAA,OAAApG,EAAAkJ,oBAAA3E,GAAA1D,IAAAmH,OAAAnB,KAAA,SAAAF,GAAA,OAAAA,EAAAe,KAAAf,EAAAlD,MAAA5C,EAAAmH,UAAAjC,EAAAD,GAAA9B,EAAA8B,EAAAhC,EAAA,aAAAE,EAAA8B,EAAAnC,EAAA,kBAAA8B,OAAAzB,EAAA8B,EAAA,mDAAA9F,EAAA2J,KAAA,SAAAC,GAAA,IAAAC,EAAA7I,OAAA4I,GAAAD,EAAA,WAAAnH,KAAAqH,EAAAF,EAAAjB,KAAAlG,GAAA,OAAAmH,EAAAG,UAAA,SAAA9B,IAAA,KAAA2B,EAAArJ,QAAA,KAAAkC,EAAAmH,EAAAI,MAAA,GAAAvH,KAAAqH,EAAA,OAAA7B,EAAAvE,MAAAjB,EAAAwF,EAAAN,MAAA,EAAAM,EAAA,OAAAA,EAAAN,MAAA,EAAAM,IAAAhI,EAAA6F,SAAAd,EAAAzD,UAAA,CAAAI,YAAAqD,EAAA8D,MAAA,SAAAmB,GAAA,GAAAvE,KAAAwE,KAAA,EAAAxE,KAAAuC,KAAA,EAAAvC,KAAA6B,KAAA7B,KAAA8B,WAAAK,EAAAnC,KAAAiC,MAAA,EAAAjC,KAAA0B,SAAA,KAAA1B,KAAAQ,OAAA,OAAAR,KAAAN,SAAAyC,EAAAnC,KAAAgD,WAAAzC,QAAA2C,IAAAqB,EAAA,QAAArI,KAAA8D,KAAA,MAAA9D,EAAAuI,OAAA,IAAA9G,EAAA5B,KAAAiE,KAAA9D,KAAAqH,OAAArH,EAAAF,MAAA,MAAAgE,KAAA9D,QAAAiG,IAAAuC,KAAA,WAAA1E,KAAAiC,MAAA,MAAA0C,EAAA3E,KAAAgD,WAAA,GAAAG,WAAA,aAAAwB,EAAAhF,KAAA,MAAAgF,EAAAjF,IAAA,OAAAM,KAAA4E,MAAA7C,kBAAA,SAAA8C,GAAA,GAAA7E,KAAAiC,KAAA,MAAA4C,EAAA,IAAAxF,EAAAW,KAAA,SAAA8E,EAAAC,EAAAC,GAAA,OAAA/D,EAAAtB,KAAA,QAAAsB,EAAAvB,IAAAmF,EAAAxF,EAAAkD,KAAAwC,EAAAC,IAAA3F,EAAAmB,OAAA,OAAAnB,EAAAK,SAAAyC,KAAA6C,EAAA,QAAAlK,EAAAkF,KAAAgD,WAAAnI,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAA6H,EAAA3C,KAAAgD,WAAAlI,GAAAmG,EAAA0B,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAkC,EAAA,UAAAnC,EAAAC,QAAA5C,KAAAwE,KAAA,KAAAS,EAAAtH,EAAA5B,KAAA4G,EAAA,YAAAuC,EAAAvH,EAAA5B,KAAA4G,EAAA,iBAAAsC,GAAAC,EAAA,IAAAlF,KAAAwE,KAAA7B,EAAAE,SAAA,OAAAiC,EAAAnC,EAAAE,UAAA,MAAA7C,KAAAwE,KAAA7B,EAAAG,WAAA,OAAAgC,EAAAnC,EAAAG,iBAAA,GAAAmC,GAAA,GAAAjF,KAAAwE,KAAA7B,EAAAE,SAAA,OAAAiC,EAAAnC,EAAAE,UAAA,YAAAqC,EAAA,UAAA1D,MAAA,6CAAAxB,KAAAwE,KAAA7B,EAAAG,WAAA,OAAAgC,EAAAnC,EAAAG,gBAAAd,OAAA,SAAArC,EAAAD,GAAA,QAAA5E,EAAAkF,KAAAgD,WAAAnI,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAA6H,EAAA3C,KAAAgD,WAAAlI,GAAA,GAAA6H,EAAAC,QAAA5C,KAAAwE,MAAA7G,EAAA5B,KAAA4G,EAAA,eAAA3C,KAAAwE,KAAA7B,EAAAG,WAAA,KAAAqC,EAAAxC,EAAA,OAAAwC,IAAA,UAAAxF,GAAA,aAAAA,IAAAwF,EAAAvC,QAAAlD,MAAAyF,EAAArC,aAAAqC,EAAA,UAAAlE,EAAAkE,IAAAhC,WAAA,UAAAlC,EAAAtB,OAAAsB,EAAAvB,MAAAyF,GAAAnF,KAAAQ,OAAA,OAAAR,KAAAuC,KAAA4C,EAAArC,WAAAlD,GAAAI,KAAAoF,SAAAnE,IAAAmE,SAAA,SAAAnE,EAAA8B,GAAA,aAAA9B,EAAAtB,KAAA,MAAAsB,EAAAvB,IAAA,gBAAAuB,EAAAtB,MAAA,aAAAsB,EAAAtB,KAAAK,KAAAuC,KAAAtB,EAAAvB,IAAA,WAAAuB,EAAAtB,MAAAK,KAAA4E,KAAA5E,KAAAN,IAAAuB,EAAAvB,IAAAM,KAAAQ,OAAA,SAAAR,KAAAuC,KAAA,kBAAAtB,EAAAtB,MAAAoD,IAAA/C,KAAAuC,KAAAQ,GAAAnD,GAAAyF,OAAA,SAAAvC,GAAA,QAAAhI,EAAAkF,KAAAgD,WAAAnI,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAA6H,EAAA3C,KAAAgD,WAAAlI,GAAA,GAAA6H,EAAAG,eAAA,OAAA9C,KAAAoF,SAAAzC,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAA/C,IAAA0F,MAAA,SAAA1C,GAAA,QAAA9H,EAAAkF,KAAAgD,WAAAnI,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAA6H,EAAA3C,KAAAgD,WAAAlI,GAAA,GAAA6H,EAAAC,WAAA,KAAA3B,EAAA0B,EAAAQ,WAAA,aAAAlC,EAAAtB,KAAA,KAAA4F,EAAAtE,EAAAvB,IAAAwD,EAAAP,GAAA,OAAA4C,GAAA,UAAA/D,MAAA,0BAAAgE,cAAA,SAAAnC,EAAAf,EAAAE,GAAA,OAAAxC,KAAA0B,SAAA,CAAApG,SAAA8E,EAAAiD,GAAAf,aAAAE,WAAA,SAAAxC,KAAAQ,SAAAR,KAAAN,SAAAyC,GAAAvC,IAAArF,EAa6B,SAEdkL,EAAWC,GAAA,OAAAC,EAAAC,MAAA5F,KAAA6F,WAAA,SAAAF,IAgBzB,OAhByBA,EAAAG,YAAArI,IAAAmG,KAA1B,SAAAmC,EAA2BC,GAAI,IAAAC,EAAAC,EAAA,OAAAzI,IAAAmB,KAAA,SAAAuH,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA5D,MAAA,UACxBkD,EAAYW,MAAMJ,GAAK,CAAAG,EAAA5D,KAAA,eAAA4D,EAAA5D,KAAA,EACJ8D,YAAM,CAC1BhH,QAAS,CACPiH,gBAAgB,GAElBN,OACA3I,aACA,OANS,OAMT4I,EAAAE,EAAAtE,KANIqE,EAAKD,EAALC,MAAKC,EAAA5D,KAAA,EAOqBzB,YAAQ,CACtCN,OAAQ,OACRnD,WACAkJ,KAAML,IACN,OAJFT,EAAYW,MAAMJ,GAAKG,EAAAtE,KAAA,cAAAsE,EAAAnE,OAAA,SAMlByD,EAAYW,MAAMJ,IAAK,wBAAAG,EAAAzB,SAAAqB,OAC/BH,MAAA5F,KAAA6F,WACDJ,EAAYW,MAAQ,GAEpB,IAAMI,EAAYC,YAChBC,YAAY,SAACC,EAAKtH,GAAO,OAAAuH,wBAAA,GACpBvH,GAAO,IACVwH,SAAUF,EAAIG,cAEhBC,YAAoB,CAClBC,QAAO,eAAAC,EAAAnB,YAAArI,IAAAmG,KAAE,SAAAsD,EAAOP,EAAKtH,GAAO,OAAA5B,IAAAmB,KAAA,SAAAuI,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA5E,MAAA,UACrBlD,EAAQiH,eAAc,CAAAa,EAAA5E,KAAA,QACQ,OADR4E,EAAAC,GAClBC,EAA0BF,EAAA5E,KAAA,EACzBkD,EAAYpG,EAAQjC,UAAS,cAAA+J,EAAAG,GAAAH,EAAAtF,KAAAsF,EAAAnF,OAAA,YAAAmF,EAAAC,IAAAD,EAAAG,IACnCzK,IAAI,SAACC,GAAG,MAAK,IAAMA,KAAG,cAAAqK,EAAAnF,OAAA,SAEnB,IAAE,wBAAAmF,EAAAzC,SAAAwC,MACV,gBAAAK,EAAAC,GAAA,OAAAP,EAAArB,MAAA5F,KAAA6F,YAPM,KAST4B,YAAM,CACJC,IAAKpK,YAAM,CACTqK,MAAO,OAEPC,QAAO,eAAAC,EAAA/B,YAAArI,IAAAmG,KAAE,SAAAkE,EAAOnB,EAAKtH,GAAO,IAAAhC,EAAAT,EAAA4J,EAAA,OAAA/I,IAAAmB,KAAA,SAAAmJ,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAxF,MAAA,cAAAwF,EAAAxF,KAAA,EAEPkD,EAAYpG,EAAQjC,UAAS,OAa7C,OAbCC,EAAM0K,EAAAlG,KACNjF,EAAOyK,EAA2BhK,GAClCmJ,EAAYwB,oBAAUpL,EAAKC,IAAI,SAACX,GAAI,MAAK,CAACA,EAAK+L,cAAe,OAClE5K,EAAOkD,QAAQ,SAACjD,GACd,IAAI4K,EAAO5K,EAAM4K,KACbA,GAAQA,EAAKtL,MACfsL,EAAKtL,KAAK2D,QAAQ,SAACzD,GACjBA,EAAMA,EAAImL,cACNzB,EAAU1J,IACZ0J,EAAU1J,GAAKmG,KAAK3F,OAIzByK,EAAA/F,OAAA,SAGDxF,IAAAC,cAACjC,EAAY,CACX4C,SAAUiC,EAAQjC,SAClBR,KAAMA,EAAKC,IAAI,SAACX,GAAI,MAAM,CACxBA,OACAc,KAAMmL,eAAKxB,EAAIG,UAAW5K,EAAK+L,eAC/B/K,OAAQsJ,EAAUtK,IAAS,IAAIrB,aAEjC,wBAAAkN,EAAArD,SAAAoD,MAEL,gBAAAM,EAAAC,GAAA,OAAAR,EAAAjC,MAAA5F,KAAA6F,YA3BM,KA8BTmB,QAAS1J,YAAM,CACbgL,SAAU,SAAC3B,GAAG,OAAKA,EAAI4B,OAAOzL,KAC9B8K,QAAO,eAAAY,EAAA1C,YAAArI,IAAAmG,KAAE,SAAA6E,EAAO9B,EAAKtH,GAAO,IAAAqJ,EAAArL,EAAAmJ,EAAA,OAAA/I,IAAAmB,KAAA,SAAA+J,GAAA,cAAAA,EAAAnE,KAAAmE,EAAApG,MAAA,OACqB,OAA3CmG,EAAe/B,EAAI4B,OAAOzL,IAAImL,cAAaU,EAAApG,KAAA,EAC5BkD,EAAYpG,EAAQjC,UAAS,OAS7C,OATCC,EAAMsL,EAAA9G,KAGN2E,EAAY,GAChBnJ,EAAOkD,QAAQ,SAACjD,IACFA,EAAM4K,MAAQ5K,EAAM4K,KAAKtL,MAAS,IACrCgM,KAAK,SAACC,GAAO,OAAKA,EAAQZ,gBAAkBS,KACnDlC,EAAUvD,KAAK3F,KAEhBqL,EAAA3G,OAAA,SAGDxF,IAAAC,cAAChC,EAAO,CACN2C,SAAUiC,EAAQjC,SAClBlB,KAAMyK,EAAI4B,OAAOzL,IACjBO,OAAQmJ,KACR,wBAAAmC,EAAAjE,SAAA+D,MAEL,gBAAAK,EAAAC,GAAA,OAAAP,EAAA5C,MAAA5F,KAAA6F,YApBM,QAyBb,SAASwB,EAA2BhK,GAAQ,IAAAF,EAC1C,OAAOnC,MAAMQ,KACX,IAAIwN,KACF7L,EAAA,IAAG8L,OAAMrD,MAAAzI,EAAAlC,EAAIoC,EAAOR,IAAI,SAACS,GAAK,OAAMA,EAAM4K,MAAQ5K,EAAM4K,KAAKtL,MAAS,SAK7D4J","file":"static/js/3.89137a60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagIndexPage\":\"TagIndexPage_TagIndexPage__1KLH1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagPage\":\"TagPage_TagPage__2Zrai\"};","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './TagIndexPage.module.css'\n\nfunction TagIndexPage(props) {\n  return (\n    <div className={styles.TagIndexPage}>\n      <h1>Tags</h1>\n      <ul>\n        {props.tags.map(tag =>\n          <li key={tag.href}>\n            <Link href={tag.href}>{tag.name} ({tag.count})</Link>\n          </li>  \n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagIndexPage","import React from 'react'\nimport ArticleSummary from './ArticleSummary'\nimport styles from './TagPage.module.css'\n\nfunction TagPage({ blogRoot, name, routes }) {\n  return (\n    <div className={styles.TagPage}>\n      <h1>{name} posts</h1>\n      <ul>\n        {routes.map(route =>\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>  \n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagPage","import React from \"react\";\nimport {\n  compose,\n  crawl,\n  mount,\n  resolve,\n  route,\n  withContext,\n  withCrawlerPatterns,\n} from \"navi\";\nimport { join } from \"path\";\nimport { fromPairs } from \"lodash\";\nimport TagIndexPage from \"../components/TagIndexPage\";\nimport TagPage from \"../components/TagPage\";\nimport routes from \"./index\";\n\nasync function crawlRoutes(root) {\n  if (!crawlRoutes.cache[root]) {\n    let { paths } = await crawl({\n      context: {\n        crawlingRoutes: true,\n      },\n      root,\n      routes,\n    });\n    crawlRoutes.cache[root] = await resolve({\n      method: \"HEAD\",\n      routes,\n      urls: paths,\n    });\n  }\n  return crawlRoutes.cache[root];\n}\ncrawlRoutes.cache = {};\n\nconst tagRoutes = compose(\n  withContext((req, context) => ({\n    ...context,\n    tagsRoot: req.mountpath,\n  })),\n  withCrawlerPatterns({\n    \"/:tag\": async (req, context) => {\n      if (!context.crawlingRoutes) {\n        return getAvailableTagsFromRoutes(\n          await crawlRoutes(context.blogRoot)\n        ).map((tag) => \"/\" + tag);\n      }\n      return [];\n    },\n  }),\n  mount({\n    \"/\": route({\n      title: \"Tags\",\n\n      getView: async (req, context) => {\n        // Build a list of pages for each tag\n        let routes = await crawlRoutes(context.blogRoot);\n        let tags = getAvailableTagsFromRoutes(routes);\n        let tagRoutes = fromPairs(tags.map((name) => [name.toLowerCase(), []]));\n        routes.forEach((route) => {\n          let data = route.data;\n          if (data && data.tags) {\n            data.tags.forEach((tag) => {\n              tag = tag.toLowerCase();\n              if (tagRoutes[tag]) {\n                tagRoutes[tag].push(route);\n              }\n            });\n          }\n        });\n\n        return (\n          <TagIndexPage\n            blogRoot={context.blogRoot}\n            tags={tags.map((name) => ({\n              name,\n              href: join(req.mountpath, name.toLowerCase()),\n              count: (tagRoutes[name] || []).length,\n            }))}\n          />\n        );\n      },\n    }),\n\n    \"/:tag\": route({\n      getTitle: (req) => req.params.tag,\n      getView: async (req, context) => {\n        let lowerCaseTag = req.params.tag.toLowerCase();\n        let routes = await crawlRoutes(context.blogRoot);\n\n        // Build a list of pages that include the tag from the site map\n        let tagRoutes = [];\n        routes.forEach((route) => {\n          let tags = (route.data && route.data.tags) || [];\n          if (tags.find((metaTag) => metaTag.toLowerCase() === lowerCaseTag)) {\n            tagRoutes.push(route);\n          }\n        });\n\n        return (\n          <TagPage\n            blogRoot={context.blogRoot}\n            name={req.params.tag}\n            routes={tagRoutes}\n          />\n        );\n      },\n    }),\n  })\n);\n\nfunction getAvailableTagsFromRoutes(routes) {\n  return Array.from(\n    new Set(\n      [].concat(...routes.map((route) => (route.data && route.data.tags) || []))\n    )\n  );\n}\n\nexport default tagRoutes;\n"],"sourceRoot":""}