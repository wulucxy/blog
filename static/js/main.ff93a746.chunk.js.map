{"version":3,"sources":["utils/formats.js","components/ArticleMeta.js","components/ArticleMeta.module.css","components/BlogIndexPage.module.css","components/LoadingIndicator.module.css","components/BlogLayout.module.css","components/ArticleSummary.js","components/ArticleSummary.module.css","components/Bio.module.css","components/BlogPostLayout.module.css","siteMetadata.js","components/Bio.js","utils/getGravatarURL.js","components/Pagination.js","utils/env.js","components/BlogIndexPage.js","components/NotFoundPage.js","components/LoadingIndicator.js","components/BlogLayout.js","components/BlogPostLayout.js","routes/posts/index.js","routes/index.js","serviceWorker.js","index.js","components/Pagination.module.css"],"names":["months","ArticleMeta","_ref","readingTimeElement","blogRoot","meta","readingTime","minutes","Math","max","round","cups","_react_16_13_0_react_default","a","createElement","Fragment","className","styles","Array","fill","join","dateTime","date","toUTCString","dateString","Date","monthName","getMonth","dayOfMonth","getDate","fourDigitYear","getFullYear","concat","formatDate","tags","length","map","tag","key","es","href","module","exports","title","articlesList","footer","LoadingIndicator","active","LoadingIndicator-animation","container","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_navi__WEBPACK_IMPORTED_MODULE_1__","_ArticleMeta__WEBPACK_IMPORTED_MODULE_2__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3___default","ArticleSummary","route","url","data","spoiler","Bio","header","bio","links","next","content","siteMetadata","author","description","indexPageSize","props","photoURL","email","size","_ref$defaultURL","defaultURL","hash","md5","toLowerCase","trim","encodeURIComponent","getGravatarURL","src","alt","Pagination","pageCount","pageNumber","dist_es","previous","String","pages","current","count","basename","process","BlogIndexPage","postRoutes","components_Bio","components_Pagination","NotFoundPage","NotFound","style","BlogLayout","isViewingIndex","loadingRoute","useLoadingRoute","components_LoadingIndicator","render","components_NotFoundPage","BlogPostLayout","_useCurrentRoute","useCurrentRoute","_ref2","MDXComponent","pathname","dist","components","Link","wrapper","_ref3","children","previousDetails","nextDetails","postModules","./2018-05-17-redux-best-practice/post.js","e","then","bind","./2018-08-15-you-dont-know-react/post.js","./2018-12-28-react-element/post.js","./2019-04-26-webkit-structure/post.js","./2019-08-01-typescript-redux/post.js","./2020-02-19-table-search-design/post.js","./2020-03-07-welcome/post.js","importPost","postPathnames","Object","keys","datePattern","postDetails","slug","slugify","replace","dateMatch","match","parseInt","posts","sortBy","reverse","i","getPage","Navi","asyncToGenerator","regenerator_default","mark","_callee2","post","getContent","previousSlug","previousPost","nextSlug","nextPost","previousPostDetails","nextPostDetails","wrap","_context2","prev","sent","default","objectWithoutProperties","abrupt","getData","req","context","objectSpread","getView","_getView","_callee","_ref4","other","_context","stop","apply","this","arguments","chunks","chunk","chunkPagePairs","pageTitle","Promise","all","router","resolve","method","_x3","view","components_BlogIndexPage","_x","_x2","routes","compose","withContext","mountpath","withView","path","test","components_BlogLayout","mount","/","shift","/page","/1","redirect","fromPairs","/posts","components_BlogPostLayout","/tags","lazy","/about","/rss","resolveSiteMap","Boolean","window","location","hostname","register","main","_main","navigation","steady","renderer","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff93a746.chunk.js","sourcesContent":["export let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nexport function formatDate(dateString) {\n  let date = new Date(dateString)\n  let monthName = months[date.getMonth()]\n  let dayOfMonth = date.getDate()\n  let fourDigitYear = date.getFullYear()\n\n  return `${monthName} ${dayOfMonth}, ${fourDigitYear}`\n}","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport { formatDate } from '../utils/formats'\nimport styles from './ArticleMeta.module.css'\n\nfunction ArticleMeta({ blogRoot, meta, readingTime }) {\n  let readingTimeElement\n  if (readingTime) {\n    let minutes = Math.max(Math.round(readingTime.minutes), 1)\n    let cups = Math.round(minutes / 5);\n    readingTimeElement =\n      <React.Fragment>\n        {' '}&bull;{' '}\n        <span className={styles.readingTime}>\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\n        </span>\n      </React.Fragment>\n  }\n      \n  return (\n    <small className={styles.ArticleMeta}>\n      <time dateTime={meta.date.toUTCString()}>{formatDate(meta.date)}</time>\n      {\n        meta.tags &&\n        meta.tags.length &&\n        <>\n          {' '}&bull;{' '}\n          <ul className={styles.tags}>\n            {meta.tags.map(tag =>\n              <li key={tag}>\n                <Link href={join(blogRoot, 'tags', tag)}>{tag}</Link>\n              </li>\n            )}\n          </ul>\n        </>\n      }\n      {readingTimeElement || null}\n    </small>\n  )\n}\n\nexport default ArticleMeta","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"ArticleMeta_tags__bwcp_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogIndexPage_title__1-Wtk\",\"articlesList\":\"BlogIndexPage_articlesList__ZoX1m\",\"footer\":\"BlogIndexPage_footer__3ZzQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIndicator\":\"LoadingIndicator_LoadingIndicator__LI6x0\",\"active\":\"LoadingIndicator_active__3vKsb\",\"LoadingIndicator-animation\":\"LoadingIndicator_LoadingIndicator-animation__1eRLN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout_container__2z5VE\",\"title\":\"BlogLayout_title__nZ4wJ\"};","import React from 'react'\nimport { Link } from 'react-navi'\nimport ArticleMeta from './ArticleMeta'\nimport styles from './ArticleSummary.module.css'\n\nfunction ArticleSummary({ blogRoot, route }) {\n  return (\n    <article className={styles.ArticleSummary}>\n      <h2><Link href={route.url.href}>{route.title}</Link></h2>\n      <ArticleMeta blogRoot={blogRoot} meta={route.data} />\n      <p>{route.data.spoiler}</p>\n    </article>\n  )\n}\n\nexport default ArticleSummary","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArticleSummary\":\"ArticleSummary_ArticleSummary__3HDtT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__iDVYA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogPostLayout_title__j9S_E\",\"header\":\"BlogPostLayout_header__hNrNi\",\"footer\":\"BlogPostLayout_footer__1TyyS\",\"bio\":\"BlogPostLayout_bio__2WXr0\",\"links\":\"BlogPostLayout_links__1fL9M\",\"next\":\"BlogPostLayout_next__1lwtu\",\"content\":\"BlogPostLayout_content__3oTIu\"};","export default {\n  // The blog's title as it appears in the layout header, and in the document\n  // <title> tag.\n  title: \"qingtong Blog\",\n\n  author: \"qingtong\",\n  description: \"来自前端一线开发的实践分享，用心做原创\",\n\n  // The number of posts to a page on the site index.\n  indexPageSize: 10,\n}\n","import React from 'react'\nimport styles from './Bio.module.css'\nimport { getGravatarURL } from '../utils/getGravatarURL'\n\nfunction Bio(props) {\n  let photoURL = getGravatarURL({\n    email: \"test1@example.com\",\n    size: 56,\n  })\n\n  return (\n    <div className={`\n      ${styles.Bio}\n      ${props.className || ''}\n    `}>\n      <img src={photoURL} alt=\"Me\" />\n      <p>\n        来自接地气的一线实践开发经验，用心做原创\n        <br />\n        分享关于 React、数据可视化、效率工具等，打造专业前端知识库\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import md5 from 'blueimp-md5'\n\nexport function getGravatarURL({ email, size, defaultURL = 'identicon' }) {\n  let hash = md5(email.toLowerCase().trim())\n  return `https://www.gravatar.com/avatar/${hash}.jpg?s=${size}&d=${encodeURIComponent(defaultURL)}`\n}\n","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './Pagination.module.css'\n\nfunction Pagination({ blogRoot, pageCount, pageNumber }) {\n  return (\n    <small className={styles.Pagination}>\n      {\n        pageNumber !== 1 &&\n        <Link\n          className={styles.previous}\n          href={join(blogRoot, 'page', String(pageNumber - 1))}>\n          ← Previous\n        </Link>\n      }\n      <span className={styles.pages}>\n        {' '}Page <span className={styles.current}>{pageNumber}</span>/<span className={styles.count}>{pageCount}</span>{' '}\n      </span>\n      {\n        pageNumber < pageCount &&\n        <Link\n          className={styles.next}\n          href={join(blogRoot, 'page', String(pageNumber + 1))}>\n          Next →\n        </Link>\n      }\n    </small>\n  )\n}\n\nexport default Pagination","const isProd = process.env.NODE_ENV === \"production\"\n\nexport const basename = isProd ? process.env.REACT_APP_BASE_URL : ''\n","import React from 'react'\nimport { Link } from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport ArticleSummary from './ArticleSummary'\nimport Bio from './Bio'\nimport Pagination from './Pagination'\nimport { basename } from '../utils/env'\nimport styles from './BlogIndexPage.module.css'\n\nfunction BlogIndexPage({ blogRoot, pageCount, pageNumber, postRoutes }) {\n  return (\n    <div>\n      <header>\n        <h1 className={styles.title}>\n          <Link href={blogRoot}>{siteMetadata.title}</Link>\n        </h1>\n        <Bio />\n      </header>\n      <ul className={styles.articlesList}>\n        {postRoutes.map(route =>\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        )}\n      </ul>\n      {\n        pageCount > 1 &&\n        <Pagination\n          blogRoot={blogRoot}\n          pageCount={pageCount}\n          pageNumber={pageNumber}\n        />\n      }\n      <footer className={styles.footer}>\n        <div>\n          <Link href={`${basename}/about`}>\n            About\n          </Link> &bull;{' '}\n          <Link href={`${basename}/tags`}>\n            Tags\n          </Link> &bull;{' '}\n          <a href='https://github.com/wulucxy/blog'>\n            Source\n          </a>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default BlogIndexPage","import React from 'react'\nimport styles from './NotFoundPage.module.css'\n\n// Note that create-react-navi-app will always show an error screen when this\n// is rendered. This is because the underlying react-scripts package shows\n// the error screen when a NotFoundError is thrown, even though it's caught\n// by <NotFoundBoundary>. To see the error rendered by this function,\n// you'll just need to close the error overlay with the \"x\" at the top right.\nfunction NotFoundPage() {\n  return (\n    <div className={styles.NotFound}>\n      <h1>404 - Not Found</h1>\n    </div>\n  )\n}\n\nexport default NotFoundPage","import React from 'react'\nimport styles from './LoadingIndicator.module.css'\n\nfunction LoadingIndicator({ active, className, style }) {\n  return (\n    <div\n      className={`\n        ${styles.LoadingIndicator}\n        ${active ? styles.active : ''}\n        ${className}\n      `}\n      style={style}\n    />\n  )\n}\n\nexport default LoadingIndicator","import React from 'react'\nimport {\n  View,\n  Link,\n  NotFoundBoundary,\n  useLoadingRoute,\n} from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport NotFoundPage from './NotFoundPage'\nimport LoadingIndicator from './LoadingIndicator'\nimport styles from './BlogLayout.module.css'\n\nfunction BlogLayout({ blogRoot, isViewingIndex }) {\n  let loadingRoute = useLoadingRoute()\n\n  return (\n    <div className={styles.container}>\n      <LoadingIndicator active={!!loadingRoute} />\n\n      {// Don't show the header on index pages, as it has a special header.\n      !isViewingIndex && (\n        <header>\n          <h3 className={styles.title}>\n            <Link href={blogRoot}>{siteMetadata.title}</Link>\n          </h3>\n        </header>\n      )}\n\n      <main>\n        <NotFoundBoundary render={() => <NotFoundPage />}>\n          <View />\n        </NotFoundBoundary>\n      </main>\n    </div>\n  )\n}\n\nexport default BlogLayout\n","import React from 'react'\nimport { View, Link, useCurrentRoute } from 'react-navi'\nimport { MDXProvider } from '@mdx-js/tag'\nimport siteMetadata from '../siteMetadata'\nimport ArticleMeta from './ArticleMeta'\nimport Bio from './Bio'\nimport styles from './BlogPostLayout.module.css'\n\nfunction BlogPostLayout({ blogRoot }) {\n  let { title, data, url } = useCurrentRoute()\n\n  return (\n    <View>\n      {({ MDXComponent, readingTime }) =>\n        // The content for posts is an MDX component, so we'll need\n        // to use <MDXProvider> to ensure that links are rendered\n        // with <Link>, and thus use pushState.\n        <article className={styles.container}>\n          <header className={styles.header}>\n            <h1 className={styles.title}>\n              <Link href={url.pathname}>{title}</Link>\n            </h1>\n            <ArticleMeta\n              blogRoot={blogRoot}\n              meta={data}\n              readingTime={readingTime}\n            />\n          </header>\n          <MDXProvider components={{\n            a: Link,\n            wrapper: ({ children }) =>\n              <div className={styles.content}>\n                {children}\n              </div>\n          }}>\n            <MDXComponent />\n          </MDXProvider>\n          <footer className={styles.footer}>\n            <h3 className={styles.title}>\n              <Link href={blogRoot}>\n                {siteMetadata.title}\n              </Link>\n            </h3>\n            <Bio className={styles.bio} />\n            <section className={styles.links}>\n              {\n                data.previousDetails &&\n                <Link className={styles.previous} href={data.previousDetails.href}>\n                  ← {data.previousDetails.title}\n                </Link>\n              }\n              {\n                data.nextDetails &&\n                <Link className={styles.next} href={data.nextDetails.href}>\n                  {data.nextDetails.title} →\n                </Link>\n              }\n            </section>\n          </footer>\n        </article>\n      }\n    </View>\n  )\n}\n\nexport default BlogPostLayout","import importAll from 'import-all.macro'\nimport * as Navi from 'navi'\nimport { join } from 'path'\nimport { sortBy } from 'lodash'\nimport slugify from 'slugify'\n\n// Get a list of all posts, that will not be loaded until the user\n// requests them.\nconst postModules = importAll.deferred('./**/post.js')\nconst importPost = pathname => postModules[pathname]()\nconst postPathnames = Object.keys(postModules)\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\n\nlet postDetails = postPathnames.map(pathname => {\n  let slug = slugify(\n    pathname.replace(/post.jsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\n  )\n    .replace(/^[-.]+|[.-]+$/g, '')\n    .replace(datePattern, '$1/')\n\n  let date\n  let dateMatch = slug.match(datePattern)\n  if (dateMatch) {\n    date = new Date(dateMatch[2], parseInt(dateMatch[3]) - 1, dateMatch[4])\n  }\n\n  return {\n    slug,\n    pathname,\n    date,\n  }\n})\n\n// Sort the pages by slug (which contain the dates)\npostDetails = sortBy(postDetails, ['slug']).reverse()\n\n// Create url-friendly slugs from post pathnames, and a `getPage()` function\n// that can be used to load and return the post's Page object.\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\n  getPage: Navi.map(async () => {\n    let { default: post } = await importPost(pathname)\n    let { title, getContent, ...meta } = post\n    let previousSlug, previousPost, nextSlug, nextPost\n\n    if (i !== 0) {\n      let previousPostDetails = postDetails[i - 1]\n      previousPost = (await importPost(previousPostDetails.pathname)).default\n      previousSlug = previousPostDetails.slug\n    }\n\n    if (i + 1 < postDetails.length) {\n      let nextPostDetails = postDetails[i + 1]\n      nextPost = (await importPost(nextPostDetails.pathname)).default\n      nextSlug = nextPostDetails.slug\n    }\n\n    return Navi.route({\n      title,\n      getData: (req, context) => ({\n        date,\n        pathname,\n        slug,\n        previousDetails: previousPost && {\n          title: previousPost.title,\n          href: join(context.blogRoot, 'posts', previousSlug),\n        },\n        nextDetails: nextPost && {\n          title: nextPost.title,\n          href: join(context.blogRoot, 'posts', nextSlug),\n        },\n        ...meta,\n      }),\n      getView: async () => {\n        let { default: MDXComponent, ...other } = await getContent()\n        return { MDXComponent, ...other }\n      },\n    })\n  }),\n  slug,\n}))\n\nexport default posts\n","import { compose, lazy, map, mount, redirect, route, withContext, withView } from 'navi'\nimport React from 'react'\nimport { join } from 'path'\nimport { chunk, fromPairs } from 'lodash'\nimport BlogIndexPage from '../components/BlogIndexPage'\nimport BlogLayout from '../components/BlogLayout'\nimport BlogPostLayout from '../components/BlogPostLayout'\nimport siteMetadata from '../siteMetadata'\nimport posts from './posts'\n\n// Split the posts into a list of chunks of the given size, and\n// then build index pages for each chunk.\nlet chunks = chunk(posts, siteMetadata.indexPageSize)\nlet chunkPagePairs = chunks.map((chunk, i) => [\n  '/' + (i + 1),\n  map(async (req, context) => {\n    // Get metadata for all pages on this page\n    let postRoutes = await Promise.all(\n      chunk.map(async post => {\n        let href = join(context.blogRoot, 'posts', post.slug)\n        return await req.router.resolve(href, {\n          // If you want to show the page content on the index page, set\n          // this to 'GET' to be able to access it.\n          method: 'HEAD',\n        })\n      }),\n    )\n\n    // Only add a page number to the page title after the first index page.\n    let pageTitle = siteMetadata.title\n    if (i > 0) {\n      pageTitle += ` – page ${i + 1}`\n    }\n\n    return route({\n      title: pageTitle,\n      view: (\n        <BlogIndexPage\n          blogRoot={context.blogRoot}\n          pageNumber={i + 1}\n          pageCount={chunks.length}\n          postRoutes={postRoutes}\n        />\n      ),\n    })\n  }),\n])\n\nconst routes = compose(\n  withContext((req, context) => ({\n    ...context,\n    blogRoot: req.mountpath || '/',\n  })),\n  withView((req, context) => {\n    // Check if the current page is an index page by comparing the remaining\n    // portion of the URL's pathname with the index page paths.\n    let isViewingIndex = req.path === '/' || /^\\/page\\/\\d+\\/$/.test(req.path)\n\n    // Render the application-wide layout\n    return (\n      <BlogLayout\n        blogRoot={context.blogRoot}\n        isViewingIndex={isViewingIndex}\n      />\n    )\n  }),\n  mount({\n    // The blog's index pages go here. The first index page is mapped to the\n    // root URL, with a redirect from \"/page/1\". Subsequent index pages are\n    // mapped to \"/page/n\".\n    '/': chunkPagePairs.shift()[1],\n    '/page': mount({\n      '/1': redirect((req, context) => context.blogRoot),\n      ...fromPairs(chunkPagePairs),\n    }),\n\n    // Put posts under \"/posts\", so that they can be wrapped with a\n    // \"<BlogPostLayout />\" that configures MDX and adds a post-specific layout.\n    '/posts': compose(\n      withView((req, context) => <BlogPostLayout blogRoot={context.blogRoot} />),\n      mount(fromPairs(posts.map(post => ['/' + post.slug, post.getPage]))),\n    ),\n\n    // Miscellaneous pages can be added directly to the root switch.\n    '/tags': lazy(() => import('./tags')),\n    '/about': lazy(() => import('./about')),\n\n    // Only the statically built copy of the RSS feed is intended to be opened,\n    // but the content is fetched here.\n    '/rss': route({\n      getData: req => req.router.resolveSiteMap('/posts', { method: 'GET' }),\n    }),\n  }),\n)\n\nexport default routes\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import register from \"navi-scripts/register\";\nimport * as Navi from \"navi\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { NaviProvider, View } from \"react-navi\";\nimport routes from \"./routes\";\nimport { basename } from './utils/env'\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.module.css\";\n// `register()` is responsible for exporting your app's pages and App\n// component to the static renderer, and for starting the app with the\n// `main()` function when running within a browser.\nregister({\n  // Specify the pages that navi-app should statically build, by passing in a\n  // Switch object.\n  routes,\n\n  // This will only be called when loading your app in the browser. It won't\n  // be called when performing static generation.\n  async main() {\n    let navigation = Navi.createBrowserNavigation({ routes, basename });\n\n    // Wait until the navigation has loaded the page's content, or failed to do\n    // so. If you want to load other data in parallel while the initial page is\n    // loading, make sure to start loading before this line.\n    await navigation.steady();\n\n    // React requires that you call `ReactDOM.hydrate` if there is statically\n    // rendered content in the root element, but prefers us to call\n    // `ReactDOM.render` when it is empty.\n    let hasStaticContent = process.env.NODE_ENV === \"production\";\n    let renderer = hasStaticContent ? ReactDOM.hydrate : ReactDOM.render;\n\n    // Start react, passing in the current navigation state via the\n    // NaviProvider.\n    renderer(\n      <NaviProvider navigation={navigation}>\n        <View />\n      </NaviProvider>,\n      document.getElementById(\"root\")\n    )\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  }\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__3iPuf\",\"previous\":\"Pagination_previous__1PBBo\",\"next\":\"Pagination_next__3Cb61\"};"],"sourceRoot":""}