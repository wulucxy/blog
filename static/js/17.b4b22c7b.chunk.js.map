{"version":3,"sources":["routes/posts/2018-08-15-you-dont-know-react/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","Object","assign","mdxType","parentName","src","alt","id","href","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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","file":"static/js/17.b4b22c7b.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"13 min read\",\"minutes\":12.755,\"time\":765300,\"words\":2551}\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <blockquote>\n      <p parentName=\"blockquote\">{`注：本文写于 2018 年，基于 react 15 的一些实践分享，部分内容已经不太符合目前 react 16 的架构，请谨慎采纳`}</p>\n    </blockquote>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://github.com/wulucxy/blog/raw/master/src/routes/posts/2018-08-15-you-dont-know-react/image/graphic.png\",\n        \"alt\": \"react-graphic\"\n      }}></img></p>\n    <p>{`React 上手很简单，初次接触 React 的同学花半天时间差不多就能看完 React 官网文档。但要真正掌握 React 是一个漫长的过程，React 真正的威力在于其背后庞大繁荣的生态圈，redux、react-router、mobX、create-react-app、GraphQL 等，你要学习的不是一个库，也不是一个框架，而是一整套技术栈，和完整的 React 的思维方式。 `}</p>\n    <p>{`本文不介绍 React 基础知识，也不介绍 React 库 的具体用法，我会分享一些 React 实战开发中的 ”令人眼前一亮“ 的案例，希望能够对你有一定的启发。当然如果你有更好的 case 分享，欢迎评论。`}</p>\n    <h3 {...{\n      \"id\": \"1-component\"\n    }}>{`1. Component`}</h3>\n    <p>{`React 有三种组件构建方式：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`React.Component`}</li>\n      <li parentName=\"ul\">{`React.pureComponent`}</li>\n      <li parentName=\"ul\">{`stateless Component`}</li>\n    </ul>\n    <p>{`这三种组件区别可以参考 `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/components-and-props.html\"\n      }}>{`官方文档`}</a>{`，这里要聊得是如何选择组件类型：`}</p>\n    <p>{`通常我们可以按照以下逻辑来确定组件应用场景：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>componentHasNoState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token comment\\\">// 1. 如果组件不需要维护应用状态，选择 stateless Component</span>\\n <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">itsStatelessComponent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>componentHasSimplePropsState <span class=\\\"token operator\\\">&amp;&amp;</span> propsHasNoNestedObjects<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token comment\\\">// 2. 如果组件属性简单，并且不含有嵌套数据，选择 pureComponent</span>\\n <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">itsPureComponent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token comment\\\">// 3. 其他情况选择 Component</span>\\n <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">itsComponent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`补充：`}</p>\n      <p parentName=\"blockquote\">{`React.pureComponent 对于高响应组件（Input 等）也不建议使用，每次比较props有性能消耗。`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"2-refs\"\n    }}>{`2. refs`}</h3>\n    <p>{`React 通过声明式的渲染机制把复杂 DOM 操作简化为 state 和 props 操作，但某些特场景，我们仍然离不开 DOM 操作和跨组件调用，React 开放了 ref 属性可以方便我们操作 DOM 和 调用其他组件实例。`}</p>\n    <p>{`React `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/refs-and-the-dom.html\"\n      }}>{`创建 ref 有三种方式`}</a>{`：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`string 类型 ref - `}<strong parentName=\"li\">{`deprecated，不推荐使用`}</strong></li>\n      <li parentName=\"ul\">{`callback ref - 推荐使用`}</li>\n      <li parentName=\"ul\">{`React.createRef() - `}<strong parentName=\"li\">{`React 16 后添加，推荐使用`}</strong></li>\n    </ul>\n    <p>{`ref 使用有几点需要特别注意：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`stateless 组件上无法直接使用，因为stateless 组件无实例`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyFunctionalComponent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>input <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Parent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">props</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>textInput <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 错误，无状态组件没有实例</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>MyFunctionalComponent ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>textInput<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <ul>\n      <li parentName=\"ul\">{`stateless 组件内部可以使用 ref`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">CustomTextInput</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">props</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ref 需要在组件初始化就创建</span>\\n  <span class=\\\"token keyword\\\">let</span> textInput <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 无状态组件内部可以创建ref</span>\\n    textInput<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>input\\n        type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"text\\\"</span>\\n        ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>textInput<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\n      <span class=\\\"token operator\\\">&lt;</span>input\\n        type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"button\\\"</span>\\n        value<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"Focus the text input\\\"</span>\\n        onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleClick<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <ul>\n      <li parentName=\"ul\">{`innerRef 跨组件调用`}</li>\n    </ul>\n    <p>{`当我们需要在父组件上拿到子组件的 DOM 元素时，我们可以传递一个自定义 innerRef 直接从父组件上拿到子组件的 DOM 元素：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">CustomTextInput</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">props</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>input ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>innerRef<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Parent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">_setRef</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">el</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>inputElement <span class=\\\"token operator\\\">=</span> el\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>CustomTextInput\\n        innerRef<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_setRef<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <ul>\n      <li parentName=\"ul\">{`ref 在 HOC 中传递`}</li>\n    </ul>\n    <p>{`ref 属性类似于 key, 本质是给 React 内部使用的，无法通过 props 进行传递。在 HOC 高阶组件内部，ref 往往不能正确获得内部实例，类似于 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reduxjs/react-redux/blob/d769be59dafde13cee509185f1bab385b90dd9e7/src/components/connectAdvanced.js#L179-L189\"\n      }}>{`react-redux 实现`}</a>{`，我们需要对组件增加 getWrappedInstance 和 setWrappedInstance 方法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token constant\\\">HOC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">WrappedComponent</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HOCComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>    \\n    <span class=\\\"token comment\\\">// 提供对外实例的方法</span>\\n    <span class=\\\"token function-variable function\\\">getWrappedInstance</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>wrappedInstance<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 实现 ref 的访问</span>\\n    <span class=\\\"token function-variable function\\\">setWrappedInstance</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">ref</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>wrappedInstance <span class=\\\"token operator\\\">=</span> ref<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>WrappedComponent ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>setWrappedInstance<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> HOCComponent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">HOC</span><span class=\\\"token punctuation\\\">(</span>Wrap<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>App ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">comp</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 只能获取到 HOCComponent</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>comp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 通过中转后可以获取到 WrappedComponent</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>comp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getWrappedInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <ul>\n      <li parentName=\"ul\">{`穿云箭 React.forwardRef`}</li>\n    </ul>\n    <p>{`React 16 可以通过 React.forwardRef 更加方便地从父组件传递 ref 到子组件，`}<inlineCode parentName=\"p\">{`ForwardRef`}</inlineCode>{` 字面意思就是 `}<inlineCode parentName=\"p\">{`forward(传递)ref`}</inlineCode>{`。`}</p>\n    <p>{`我们对上面定义的 HOC 高阶组件做一个改造：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token constant\\\">HOC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">WrappedComponent</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HOCComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>   \\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>forwardRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>WrappedComponent ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>forwardRef<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forwardRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">props<span class=\\\"token punctuation\\\">,</span> ref</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>HOCComponent forwardRef<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>ref<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">HOC</span><span class=\\\"token punctuation\\\">(</span>Wrap<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>App ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">comp</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 此时就能直接拿到内部组件实例了</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>comp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"3-react-router-支持路由动态布局\"\n    }}>{`3. React-Router 支持路由动态布局`}</h3>\n    <p>{`一个复杂的单页应用往往有不止一种 页面布局 展示，比如 A 页面布局是：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">&lt;</span>Header<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Asider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Main<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span>Footer<span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`B 页面的布局是：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">&lt;</span>Header<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Main<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span>Footer<span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`我们希望实现根据页面路由自定义页面布局展现。`}</p>\n    <p>{`在单一页面布局下，我们通常是这么架构应用路由：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">&lt;</span>Layout<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Switch<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route<span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`为了支持动态 `}<inlineCode parentName=\"p\">{`layout`}</inlineCode>{` 布局能力，就无法再沿用 `}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{` 嵌套 `}<inlineCode parentName=\"p\">{`Route`}</inlineCode>{` 来实现，我们希望能够实现 `}<inlineCode parentName=\"p\">{`Route`}</inlineCode>{` 嵌套 `}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`：`}</p>\n    <p>{`类似于：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Layout <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`这样就可以实现动态路由布局能力了。`}</p>\n    <p><inlineCode parentName=\"p\">{`react-router`}</inlineCode>{` 提供了 `}<a parentName=\"p\" {...{\n        \"href\": \"https://reacttraining.com/react-router/web/api/Route/render-func\"\n      }}>{`render`}</a>{` 方法来自定义`}<inlineCode parentName=\"p\">{`Route`}</inlineCode>{`组件。`}</p>\n    <p>{`对 Route 稍加改写就可以支持了：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">BaseRoute</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token literal-property property\\\">component</span><span class=\\\"token operator\\\">:</span> Component<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token parameter\\\">matchProps</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>BaseLayout<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>Component <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>matchProps<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>BaseLayout<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`于是我们在外部调用即可：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Switch<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>BaseRoute path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'/guide'</span> exact component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>QuickStart<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>WithoutSideBarRoute path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'/demo'</span> exact component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Demo<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>Redirect to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'/guide'</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n   <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Switch<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`这样我们就可以将`}<inlineCode parentName=\"p\">{`Router`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`组合起来，衍生出各种布局能力了。`}</p>\n    <h3 {...{\n      \"id\": \"4-单页应用-pv-统计\"\n    }}>{`4. 单页应用 PV 统计`}</h3>\n    <p>{`传统页面 PV 统计是基于页面之间链接跳转实现，但在单页应用里页内路由替代了请求新的页面，PV 统计只在应用初始化才会触发，这就意味着我们需要新的单页应用 PV 统计方案。`}</p>\n    <p>{`我们有两种方式来实现 PV 统计：`}</p>\n    <ol>\n      <li parentName=\"ol\">{`监听 hashChange 变化上报 PV`}</li>\n      <li parentName=\"ol\">{`基于 decorate 装饰 Route 组件，每次参数变更上报 PV`}</li>\n    </ol>\n    <p>{`第 1 种方案很好实现，在路由文件上侦听 hashChange 事件即可`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token function-variable function\\\">hashChangeHandle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ReactGA<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pageview</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>location<span class=\\\"token punctuation\\\">.</span>pathname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>location<span class=\\\"token punctuation\\\">.</span>search<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">componentDidMount</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hashchange'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>hashChangeHandler<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">componentWillUnmount</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hashchange'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>hashChangeHandler<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`第二种方案的本质是当路由组件参数变更时，意味着此时路由 `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{` 参数变更，直接监听 `}<inlineCode parentName=\"p\">{`componentWillReiveProps`}</inlineCode>{` 就能实现 PV 上报。我们需要一个装饰器方法将路由组件包装好。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">withRouter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">WrappedComponent</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>PureComponent <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function-variable function\\\">trackData</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">props</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>location<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> props\\n      <span class=\\\"token comment\\\">// 上报PV</span>\\n      ReactGA<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pageview</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>location<span class=\\\"token punctuation\\\">.</span>pathname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>location<span class=\\\"token punctuation\\\">.</span>search<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">componentDidMount</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 初始化也要上报PV</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trackData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">componentWillReceiveProps</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">props</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 每次路由参数变更上报PV</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trackData</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>WrappedComponent <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`在外面调用就很简单了，将 `}<inlineCode parentName=\"p\">{`BaseRoute`}</inlineCode>{` 包装一层即可。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// ....BaseRoute 原有逻辑\nexport default withRouter()(BaseRoute)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"5-权限控制\"\n    }}>{`5. 权限控制`}</h3>\n    <p>{`权限控制是中后台系统的核心功能之一，权限控制一般分为页面粒度和页面元素粒度。`}</p>\n    <p>{`当我们需要对页面元素粒度进行权限控制时，譬如我们需要页面上 button 按钮根据是否有权限，来控制展示或隐藏：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"data-language\": \"jsx\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>code<span class=\\\"token punctuation\\\">,</span> resouceList<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n  <span class=\\\"token keyword\\\">let</span> hasAuth <span class=\\\"token operator\\\">=</span> resouceList<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">includes</span><span class=\\\"token punctuation\\\">(</span>code<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token punctuation\\\">{</span>hasAuth <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">创建用户</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    \\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`一个元素这么写当然没问题，但是如果有 10 个元素需要加权限控制，或者按钮的显示逻辑修改了呢，我们需要一个更加通用的解决办法。`}</p>\n    <p>{`我们可以创建一个组件容器组件专门负责管理权限：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">AuthContainer</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> resourceList<span class=\\\"token punctuation\\\">,</span> children<span class=\\\"token punctuation\\\">,</span> code <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> hasAuth <span class=\\\"token operator\\\">=</span> resourceList<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">includes</span><span class=\\\"token punctuation\\\">(</span>code<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> hasAuth <span class=\\\"token operator\\\">&amp;&amp;</span> children\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`然后将上面的组件改写一下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>code<span class=\\\"token punctuation\\\">,</span> resouceList<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>AuthContainer code<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>code<span class=\\\"token punctuation\\\">}</span> resouceList<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>resouceList<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button<span class=\\\"token operator\\\">></span>创建用户<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>AuthContainer<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`重构完的代码无论是从语义性，还是扩展性都有很大的提升。`}</p>\n    <h3 {...{\n      \"id\": \"6-currying-react\"\n    }}>{`6. currying React`}</h3>\n    <p>{`currying 柯里化是函数式语言基础的写法，通俗化来说就是把多个参数的函数变换成接受一个个单一参数的函数，并且在最后返回新函数。`}</p>\n    <p>{`也广泛应用在 React 及其周边库的写法中，像常用`}<inlineCode parentName=\"p\">{`react-redux`}</inlineCode>{` 中 `}<inlineCode parentName=\"p\">{`connect(mapStateToProps, mapDispatchToProps)(App)`}</inlineCode>{` 就是标准的柯里化写法。`}</p>\n    <p>{`以下举个栗子来阐释柯里化在 React 开发中的实践：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`多个过滤条件合并`}</li>\n    </ul>\n    <p>{`现在有一个case，我们分别需要针对 price、age、brand 三个维度过滤筛选产品列表`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// 通常实现</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Filters</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 更新价格条件</span>\\n  <span class=\\\"token function-variable function\\\">updatePriceFilter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">newValue</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">selectionsChanged</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>filterSelections<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token literal-property property\\\">price</span><span class=\\\"token operator\\\">:</span> newValue\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token comment\\\">// 更新年龄条件</span>\\n  <span class=\\\"token function-variable function\\\">updateAgeFilter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">newValue</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">selectionsChanged</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>filterSelections<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token literal-property property\\\">ages</span><span class=\\\"token operator\\\">:</span> newValue\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token comment\\\">// 更新品牌条件</span>\\n  <span class=\\\"token function-variable function\\\">updateBrandFilter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">newValue</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">selectionsChanged</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>filterSelections<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token literal-property property\\\">brands</span><span class=\\\"token operator\\\">:</span> newValue\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>PriceFilter \\n          priceChanged<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>updatePriceFilter<span class=\\\"token punctuation\\\">}</span> \\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>AgeFilter \\n          agesChanged<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>updateAgeFilter<span class=\\\"token punctuation\\\">}</span> \\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>BrandFilter \\n          brandsChanged<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>updateBrandFilter<span class=\\\"token punctuation\\\">}</span> \\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\"\n        }\n      }}></code></pre>\n    <p>{`我们发现，三个过滤方法除了过滤条件不一样，其他代码逻辑几乎一样，如果后续再增加一个过滤条件，我们几乎是需要再拷贝一遍代码，这不科学。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// 柯里化实现</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Filters</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 合并过滤条件</span>\\n  <span class=\\\"token function-variable function\\\">updateSelections</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">selectionType</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">newValue</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">selectionsChanged</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>filterSelections<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span>selectionType<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">:</span> newValue<span class=\\\"token punctuation\\\">,</span>\\n     <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>PriceFilter \\n          priceChanged<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">updateSelections</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'price'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>AgeFilter \\n          agesChanged<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">updateSelections</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'age'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>BrandFilter \\n          brandsChanged<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">updateSelections</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'brand'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`很明显，柯里化改造后的代码大大简化了代码逻辑，也增强后续扩展性。`}</p>\n    <blockquote>\n      <blockquote parentName=\"blockquote\">\n        <p parentName=\"blockquote\">{`更新 `}</p>\n      </blockquote>\n      <p parentName=\"blockquote\">{`目前这种实现方式，还是会导致每次重新创建匿名方法，应该通过如下方式，才能避免文中所说的匿名方法重复创建问题：`}</p>\n      <p parentName=\"blockquote\">{`updateSelectionsPrice = updateSelections(’price’)`}</p>\n      <p parentName=\"blockquote\">{`updateSelectionsAge = updateSelections(’age’)`}</p>\n      <p parentName=\"blockquote\">{`updateSelectionsBrand = updateSelections(’brand’)`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"7-recompose-让生活更美好\"\n    }}>{`7. recompose 让生活更美好`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/acdlite/recompose/blob/master/docs/API.md\"\n      }}>{`recompose`}</a>{` 是一个优秀的 React 社区开源库，提供了一系列小而美的高阶组件和工具类方法，可以看成是 React 的 lodash。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`pure：可以将函数式组件实现 PureComponent 的能力，减少重复渲染`}</li>\n      <li parentName=\"ul\">{`withProps: 给组件添加属性，譬如可以将当前页面的路由信息、一些需要计算的信息作为属性注入到组件`}</li>\n      <li parentName=\"ul\">{`withPropsOnChange: 类似于withProps, 当时只有当传入组件发生变更才会重新计算属性注入到组件中`}</li>\n      <li parentName=\"ul\">{`defaultProps：添加默认属性（常用于公共属性的提取和添加）`}</li>\n      <li parentName=\"ul\">{`setPropTypes：设置属性类型（常用于公共属性设置）`}</li>\n      <li parentName=\"ul\">{`compose：将多个高阶组件组合起来`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"composedHoc <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">compose</span><span class=\\\"token punctuation\\\">(</span>hoc1<span class=\\\"token punctuation\\\">,</span> hoc2<span class=\\\"token punctuation\\\">,</span> hoc3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>App<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// 实际上等于</span>\\n<span class=\\\"token function\\\">hoc1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hoc2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hoc3</span><span class=\\\"token punctuation\\\">(</span>App<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`希望 recompose 同样能够成为你开发的得力助手。`}</p>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"1-component\",\n    level: 3,\n    title: \"1. Component\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"2-refs\",\n    level: 3,\n    title: \"2. refs\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"3-react-router-支持路由动态布局\",\n    level: 3,\n    title: \"3. React-Router 支持路由动态布局\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"4-单页应用-pv-统计\",\n    level: 3,\n    title: \"4. 单页应用 PV 统计\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"5-权限控制\",\n    level: 3,\n    title: \"5. 权限控制\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"6-currying-react\",\n    level: 3,\n    title: \"6. currying React\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"7-recompose-让生活更美好\",\n    level: 3,\n    title: \"7. recompose 让生活更美好\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}