{"version":3,"sources":["routes/posts/2019-08-01-typescript-redux/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","Object","assign","mdxType","parentName","src","alt","href","id","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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","file":"static/js/20.840da976.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"14 min read\",\"minutes\":13.035,\"time\":782100,\"words\":2607}\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://github.com/wulucxy/blog/raw/master/src/routes/posts/2019-08-01-typescript-redux/image/ts.png\",\n        \"alt\": \"image\"\n      }}></img></p>\n    <p><strong parentName=\"p\">{`TLDR: 文章比较长，可以跳过直接`}<a parentName=\"strong\" {...{\n          \"href\": \"https://wulucxy.github.io/redux-typescript-guide/\"\n        }}>{`查看 Demo`}</a></strong></p>\n    <h3 {...{\n      \"id\": \"前言\"\n    }}>{`前言`}</h3>\n    <p>{`typescript 是一个有着类型定义的 js 语言的超集。typescript 支持最新的 ESMAScript 特性，并且支持泛型、类型定义等静态语言特征，`}<strong parentName=\"p\">{`是为了大规模应用而生`}</strong>{`。我们团队之前在内部一些项目中初步尝试了 `}<inlineCode parentName=\"p\">{`React + Redux + TypeScript`}</inlineCode>{` 组合。本文则尝试梳理基于 `}<inlineCode parentName=\"p\">{`typescript`}</inlineCode>{` 如何更合理的架构 `}<inlineCode parentName=\"p\">{`redux`}</inlineCode>{`。`}</p>\n    <h2 {...{\n      \"id\": \"一-环境配置\"\n    }}>{`一. 环境配置`}</h2>\n    <p>{`当前 `}<inlineCode parentName=\"p\">{`ts + react`}</inlineCode>{` 项目基础配置如下：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`编译：@babel/preset-typescript`}</li>\n      <li parentName=\"ul\">{`开发、打包：parcel`}</li>\n      <li parentName=\"ul\">{`语法校验：eslint、tsc`}</li>\n    </ul>\n    <p>{`其中引入 `}<inlineCode parentName=\"p\">{`babel/preset`}</inlineCode>{` 来替代 `}<inlineCode parentName=\"p\">{`ts-loader`}</inlineCode>{`，这样既解决了 ts 工程化构建效率问题，同时不影响类型校验，还统一了编译工具。`}</p>\n    <p>{`接入 `}<inlineCode parentName=\"p\">{`babel`}</inlineCode>{` 以后，需要对 `}<inlineCode parentName=\"p\">{`tsconfig`}</inlineCode>{` 规则稍作修改，此时 ts 的定位仅仅是类型校验，代码编译的工作就完全交给 `}<inlineCode parentName=\"p\">{`babel`}</inlineCode>{` 来处理了。`}</p>\n    <p><em parentName=\"p\">{`tsconfig.json`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"data-language\": \"json\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"compilerOptions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 解析为最新版本的es版本，babel 负责后续的编译</span>\\n    <span class=\\\"token property\\\">\\\"target\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"esnext\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"module\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"esnext\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// ts 的解析规则</span>\\n    <span class=\\\"token property\\\">\\\"lib\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"esnext\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"dom\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 绝对地址按照 node_modules 解析</span>\\n    <span class=\\\"token property\\\">\\\"moduleResolution\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"node\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 开启 jsx</span>\\n    <span class=\\\"token property\\\">\\\"jsx\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 不执行构建，交由 babel 执行</span>\\n    <span class=\\\"token property\\\">\\\"noEmit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 严格模式，包括 strictNullChecks &amp; noImplicitAny.</span>\\n    <span class=\\\"token property\\\">\\\"strict\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 跳过三方包检查</span>\\n    <span class=\\\"token property\\\">\\\"skipLibCheck\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// any 类型不警告</span>\\n    <span class=\\\"token property\\\">\\\"noImplicitAny\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 关闭 null 严格检查</span>\\n    <span class=\\\"token property\\\">\\\"strictNullChecks\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 将每个文件作为单独的模块</span>\\n    <span class=\\\"token property\\\">\\\"isolatedModules\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// Import non-ES modules as default imports.</span>\\n    <span class=\\\"token property\\\">\\\"esModuleInterop\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"include\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"src\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\"\n        }\n      }}></code></pre>\n    <p>{`接下来还需要配置 `}<inlineCode parentName=\"p\">{`eslint`}</inlineCode>{` 规则：`}</p>\n    <p><em parentName=\"p\">{`.eslintrc`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"data-language\": \"json\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"parser\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"@typescript-eslint/parser\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"parserOptions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"project\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./tsconfig.json\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"ecmaVersion\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">2018</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"extends\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"@npm/standard/react\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"plugin:@typescript-eslint/recommended\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"prettier\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"prettier/@typescript-eslint\\\"</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"plugins\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"@typescript-eslint\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"rules\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 自定义 lint 规则</span>\\n    <span class=\\\"token property\\\">\\\"react/prop-types\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"@typescript-eslint/no-explicit-any\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"warn\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`最后一步就是在 `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` 里面添加脚本命令了：`}</p>\n    <p><em parentName=\"p\">{`package.json`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"data-language\": \"json\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"parcel src/public/index.html --open\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"prebuild\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"npm run build:clean\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"build:clean\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"rimraf ./dist\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"build\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"parcel build src/public/index.html --no-source-maps\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"lint\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"eslint src --fix --format codeframe\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"lint-staged\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"lint-staged\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"ts-compile-check\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"tsc --pretty -p tsconfig.json\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`以上，我们就实现了一套完整工程化能力的 `}<inlineCode parentName=\"p\">{`typescript`}</inlineCode>{` 开发环境了。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`let’s RUN~~~`}</p>\n    </blockquote>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://github.com/wulucxy/blog/raw/master/src/routes/posts/2019-08-01-typescript-redux/image/run.png\",\n        \"alt\": \"run\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"二-数据和分层\"\n    }}>{`二. 数据和分层`}</h2>\n    <h3 {...{\n      \"id\": \"1-目录结构\"\n    }}>{`1. 目录结构`}</h3>\n    <p>{`目录即分层，一个好的目录结构能够让我们在开发中更加得心应手。在开发 redux 应用中，有一种普遍的做法是根据 `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`reducer`}</inlineCode>{` 功能进行分层，一个典型的应用是这样的：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`.\n|-- actions             // 全局 action\n|-- components          // 公共组件\n|   |-- Footer.tsx\n|   |-- Header.tsx\n|-- pages               // 页面\n|   |-- home\n|      |-- components  // 组件入口  \n|      \\`-- index.tsx   // 页面入口 \n|-- reducers           // 全局 reducer\n|-- store              // store 入口\n|-- types.d.ts         // 三方类型声明\n`}</code></pre>\n    <p>{`在实际开发中，开发往往会在不同文件中来回跳跃，尤其是当项目文件膨胀以后，在不同文件中跳跃式寻找会占据很大比例的时间。基于此，社区开始流行另外一种开发方式，俗称「ducks」规则，简而言之就是将 `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`reducer`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`actionType`}</inlineCode>{` 放在一起进行管理，`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/erikras/ducks-modular-redux\"\n      }}>{`参考链接`}</a>{`。 其中 `}<inlineCode parentName=\"p\">{`ducks`}</inlineCode>{` 命名来自于`}<inlineCode parentName=\"p\">{`redux`}</inlineCode>{` 结尾音。`}</p>\n    <p><strong parentName=\"p\">{`ducks`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`.\n|-- components           // 公共组件\n|   |-- Footer.tsx\n|   |-- Header.tsx\n|-- pages\n|   |-- home\n|   |  |-- index.ts      // 页面入口\n|   |  |-- components    // 组件\n|   |  |-- types.ts      // 类型声明\n|   |  \\`-- reducer.ts    // action/reducer\n|-- store                 // redux store 入口\n|-- types.d.ts            // 三方组件类型声明\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"2-数据不可变性\"\n    }}>{`2. 数据不可变性`}</h3>\n    <p>{`在 redux 开发中，需要遵循的一个原则是`}<inlineCode parentName=\"p\">{`数据不可变性 (immutable)`}</inlineCode>{`，每个 reducer 不能修改原始值，而只能返回一个新的 state。`}</p>\n    <p>{`在 接触 `}<inlineCode parentName=\"p\">{`typescript`}</inlineCode>{` 之前，`}<a parentName=\"p\" {...{\n        \"href\": \"https://immutable-js.github.io/immutable-js/\"\n      }}>{`immutable.js`}</a>{` 是结合 redux 实现数据不可变的最佳辅助工具。然而，`}<inlineCode parentName=\"p\">{`immutable.js`}</inlineCode>{` 对 `}<inlineCode parentName=\"p\">{`ts`}</inlineCode>{` 的支持就一言难尽了，这两者都是很好的工具，但是放在一起，却是那么的不合适。`}</p>\n    <p>{`所以我们在实际项目中尝试了使用 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/immerjs/immer\"\n      }}>{`immer`}</a>{` 来实现数据持久化，`}<inlineCode parentName=\"p\">{`immer`}</inlineCode>{` 通过 `}<inlineCode parentName=\"p\">{`proxy`}</inlineCode>{` 实现了用原生 js 语法实现了数据不可变。虽然写起来没有像 `}<inlineCode parentName=\"p\">{`immutable.js`}</inlineCode>{` 函数式写法那么爽，但至少能用。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`后续，我们仍然会探索基于 `}<inlineCode parentName=\"p\">{`immutable.js`}</inlineCode>{` 的 `}<inlineCode parentName=\"p\">{`typescript`}</inlineCode>{` 写法，不再本文范畴之内。`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"3-store\"\n    }}>{`3. Store`}</h3>\n    <p>{`在 `}<inlineCode parentName=\"p\">{`Store`}</inlineCode>{` 中我们将 `}<inlineCode parentName=\"p\">{`reducer`}</inlineCode>{` 进行聚合，并对外导出应用级别的状态数据。`}</p>\n    <p><em parentName=\"p\">{`src/store/root-reducers.ts`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// 页面 reducer 聚合</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ReducersMapObject <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"redux\\\"</span>\\n<span class=\\\"token comment\\\">// 导入每个页面独立的 reducer 和 类型声明</span>\\n<span class=\\\"token keyword\\\">import</span> bitcoin <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../pages/basic/reducer\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BitcoinState <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../pages/basic/types\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 应用级数据类型接口</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AppState</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">bitcoin</span><span class=\\\"token operator\\\">:</span> BitcoinState<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token literal-property property\\\">reducers</span><span class=\\\"token operator\\\">:</span> ReducersMapObject <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  bitcoin\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> reducers \\n\"\n        }\n      }}></code></pre>\n    <p><em parentName=\"p\">{`src/store/create.ts`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// 导入 redux 和 immer 相应的方法</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createStore<span class=\\\"token punctuation\\\">,</span> Reducer <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux'</span>\\n<span class=\\\"token keyword\\\">import</span> produce <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"immer\\\"</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> combineReducers <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"redux-immer\\\"</span>\\n\\n<span class=\\\"token comment\\\">// 聚合后的 reducer 和顶层应用数据</span>\\n<span class=\\\"token keyword\\\">import</span> reducers<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> AppState <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./root-reducer\\\"</span>\\n\\n<span class=\\\"token comment\\\">// 通过 combineReducer 将 reducer 合并为一</span>\\n<span class=\\\"token comment\\\">// 注意这里的 combineReducers 是基于 immer 的实现</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token literal-property property\\\">rootReducer</span><span class=\\\"token operator\\\">:</span> Reducer<span class=\\\"token operator\\\">&lt;</span>AppState<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">combineReducers</span><span class=\\\"token punctuation\\\">(</span>produce<span class=\\\"token punctuation\\\">,</span> reducers<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 导出 store</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>\\n    rootReducer<span class=\\\"token punctuation\\\">,</span>\\n    initialState<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">applyMiddleware</span><span class=\\\"token punctuation\\\">(</span>Thunk<span class=\\\"token punctuation\\\">,</span> promiseMiddleware<span class=\\\"token punctuation\\\">,</span> Logger<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"4-声明类型文件-dts\"\n    }}>{`4. 声明类型文件 .d.ts`}</h3>\n    <p>{`我们在项目中会依赖到很多三方、二方包仍然是用纯 js 实现的，将这些代码重构为 `}<inlineCode parentName=\"p\">{`typescript`}</inlineCode>{` 显然是不现实的，ts 的做法是我们可以声明 `}<inlineCode parentName=\"p\">{`.d.ts`}</inlineCode>{` 类型文件将三方包引入到 ts 工程中。`}</p>\n    <p><inlineCode parentName=\"p\">{`.d.ts`}</inlineCode>{` 中 `}<inlineCode parentName=\"p\">{`d`}</inlineCode>{` 的含义是 `}<inlineCode parentName=\"p\">{`declaration`}</inlineCode>{` 即声明，实际使用我们无需关注具体实现，而只需要导出类型声明即可。`}</p>\n    <p>{`最简单的声明文件是这样的：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`declare module '@npm/r3'\n`}</code></pre>\n    <p>{`但是如果你的项目中类型声明非常重要的话，建议到 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/DefinitelyTyped/DefinitelyTyped\"\n      }}>{`DefinitelyTyped`}</a>{` 查看更多优质类型定义文件，并贡献自己的力量。`}</p>\n    <p>{`在声明类型文件还有一种`}<strong parentName=\"p\">{`取巧的做法`}</strong>{`是定义全局类型，全局类型无需导入即可对所有文件可见，举例：`}</p>\n    <p><em parentName=\"p\">{`typing.d.ts`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`interface IUser {\n  name: string\n  phone: number\n}\n`}</code></pre>\n    <p>{`定义好之后你在任意文件中都可以直接使用该类型。`}</p>\n    <p>{`实际上这样做有可商榷之处，在导入三方类型声明的文件中，用来声明当前应用的全局类型。这样的做法 `}<a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/questions/42233987/how-to-configure-custom-global-interfaces-d-ts-files-for-typescript\"\n      }}>{`社区并不推荐`}</a>{`。实际上你应该定义一个独立的 `}<inlineCode parentName=\"p\">{`.ts`}</inlineCode>{` 文件，然后通过 `}<inlineCode parentName=\"p\">{`export/import`}</inlineCode>{` 来引用。`}</p>\n    <h2 {...{\n      \"id\": \"三-reducer\"\n    }}>{`三. reducer`}</h2>\n    <p>{`前面我们提到将 `}<inlineCode parentName=\"p\">{`reducer`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`action`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`actionType`}</inlineCode>{` 按照 `}<inlineCode parentName=\"p\">{`ducks`}</inlineCode>{` 规则统一到一个文件中管理, 并且将`}<strong parentName=\"p\">{`类型声明`}</strong>{`也统一到一个文件。接下来我们展开来介绍这部分内容：`}</p>\n    <h3 {...{\n      \"id\": \"1-types\"\n    }}>{`1. types`}</h3>\n    <p><inlineCode parentName=\"p\">{`actionType`}</inlineCode>{` 是一种可枚举类型：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">enum</span> BitcoinActionTypes <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 请求比特币周期价格指数</span>\\n  <span class=\\\"token constant\\\">BITCOIN_QUERY_LIST</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"BITCOIN_QUERY_LIST\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 请求比特币当前价格</span>\\n  <span class=\\\"token constant\\\">BITCOIN_QUERY_CURRENCY</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"BITCOIN_QUERY_CURRENCY\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 设置当前过滤条件</span>\\n  <span class=\\\"token constant\\\">BITCOIN_SET_FILTER</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"BITCOIN_SET_FILTER\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`通过枚举类型结合 `}<inlineCode parentName=\"p\">{`typescript`}</inlineCode>{` 的强类型自动推导能力，可以实现开发自动输入补全：\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://github.com/wulucxy/blog/raw/master/src/routes/posts/2019-08-01-typescript-redux/image/infer.png\",\n        \"alt\": \"enum\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"2-actions\"\n    }}>{`2. actions`}</h3>\n    <p>{`redux 中的 `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{` 分为两类：同步和异步。`}</p>\n    <p><strong parentName=\"p\">{`同步 action`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BitcoinActionTypes <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./types\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">setFilterType</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token literal-property property\\\">filterType</span><span class=\\\"token operator\\\">:</span> string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> BitcoinActionTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">BITCOIN_SET_FILTER</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">payload</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span> filterType <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`借助 `}<inlineCode parentName=\"p\">{`typeof`}</inlineCode>{` 关键词，我们在`}<inlineCode parentName=\"p\">{`types`}</inlineCode>{` 文件中非常方便地导出类型：`}</p>\n    <p><em parentName=\"p\">{`types.ts`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> setFilterType <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./reducer\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> type SetFilterType <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> setFilterType<span class=\\\"token punctuation\\\">;</span>\\n\"\n        }\n      }}></code></pre>\n    <p><strong parentName=\"p\">{`异步 action`}</strong></p>\n    <p>{`在项目中我们使用了 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/pburtchaell/redux-promise-middleware\"\n      }}>{`redux-promise-middleware`}</a>{` 进行异步 action 的管理，异步 action 会返回 promise，但是写法仍然沿用同步 action 的写法。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> AsyncAction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"redux-promise-middleware\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> queryBPICurrency <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token parameter\\\">AsyncAction</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> BitcoinActionTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">BITCOIN_QUERY_CURRENCY</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 这里这里payload 实际返回的是 promise</span>\\n    <span class=\\\"token literal-property property\\\">payload</span><span class=\\\"token operator\\\">:</span> axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"//api.coindesk.com/v1/bpi/currentprice/cny.json\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`注意这里的 `}<inlineCode parentName=\"p\">{`AsyncAction`}</inlineCode>{` 来自 `}<inlineCode parentName=\"p\">{`redux-promise-middleware`}</inlineCode>{` 的 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/pburtchaell/redux-promise-middleware/blob/master/src/index.d.ts\"\n      }}>{`类型定义`}</a>{`。`}</p>\n    <p>{`通过 `}<inlineCode parentName=\"p\">{`typeof`}</inlineCode>{` 类型推导:`}</p>\n    <p><em parentName=\"p\">{`types.ts`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> queryBPI <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./reducer\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> type QueryBPI <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> queryBPI\\n\"\n        }\n      }}></code></pre>\n    <p>{`结果如下：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type QueryBPI = (params: BPIParams) => AsyncAction\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"3reducer\"\n    }}>{`3.reducer`}</h3>\n    <p>{`结合`}<inlineCode parentName=\"p\">{`redux-promise-middleware`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`type-to-reducer`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`immer`}</inlineCode>{`，我们来完成具备类型的 `}<inlineCode parentName=\"p\">{`reducer`}</inlineCode>{`。`}</p>\n    <p><em parentName=\"p\">{`types.ts`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// state 类型</span>\\n<span class=\\\"token comment\\\">// 其中 Record 泛型是 `{ [key: string]: T }` 的简写</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">BitcoinState</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">filterType</span><span class=\\\"token operator\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token literal-property property\\\">requestLoading</span><span class=\\\"token operator\\\">:</span> boolean<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token literal-property property\\\">currentPrice</span><span class=\\\"token operator\\\">:</span> Record<span class=\\\"token operator\\\">&lt;</span>string<span class=\\\"token punctuation\\\">,</span> BitcoinPrice<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p><strong parentName=\"p\">{`reducer.ts`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> typeToReducer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"type-to-reducer\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BitcoinActionTypes<span class=\\\"token punctuation\\\">,</span> BPIParams <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./types\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 导出 reducer</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">typeToReducer</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token comment\\\">// 同步 action</span>\\n  <span class=\\\"token punctuation\\\">[</span>BitcoinActionTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">BITCOIN_SET_FILTER</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">state<span class=\\\"token punctuation\\\">,</span> action</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> filterType <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> action<span class=\\\"token punctuation\\\">.</span>payload<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// immer 包装后可以直接用原生 js 修改值</span>\\n    state<span class=\\\"token punctuation\\\">.</span>filterType <span class=\\\"token operator\\\">=</span> filterType<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 异步action</span>\\n  BitcoinActionTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">BITCOIN_QUERY_CURRENCY</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function-variable function\\\">PENDING</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">state<span class=\\\"token punctuation\\\">,</span> action</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      state<span class=\\\"token punctuation\\\">.</span>requestLoading <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n      <span class=\\\"token keyword\\\">return</span> state\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function-variable function\\\">FULFILLED</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">state<span class=\\\"token punctuation\\\">,</span> action</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> bpi <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> action<span class=\\\"token punctuation\\\">.</span>payload<span class=\\\"token punctuation\\\">;</span>\\n      state<span class=\\\"token punctuation\\\">.</span>currentPrice <span class=\\\"token operator\\\">=</span> bpi<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <h2 {...{\n      \"id\": \"四-连接组件\"\n    }}>{`四. 连接组件`}</h2>\n    <p>{`接下来我们将类型化后的 redux 连接到 React 组件：`}</p>\n    <h3 {...{\n      \"id\": \"1-connect-连接\"\n    }}>{`1. connect 连接`}</h3>\n    <p>{`react 组件和 redux 通过 `}<inlineCode parentName=\"p\">{`react-redux`}</inlineCode>{` 的 connect 方法进行连接：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> connect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-redux\\\"</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> AppState <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../../store/root-reducer\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 导入类型</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span>\\n  SetFilterType<span class=\\\"token punctuation\\\">,</span>\\n  QueryBPICurrency<span class=\\\"token punctuation\\\">,</span>\\n  QueryBPI<span class=\\\"token punctuation\\\">,</span>\\n  BitcoinState<span class=\\\"token punctuation\\\">,</span>\\n  BPIParams\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./types\\\"</span>\\n\\n<span class=\\\"token comment\\\">// 类型扩展</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">BasicProps</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">BitcoinState</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">setFilterType</span><span class=\\\"token operator\\\">:</span> SetFilterType<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token literal-property property\\\">queryBPICurrency</span><span class=\\\"token operator\\\">:</span> QueryBPICurrency<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token literal-property property\\\">queryBPI</span><span class=\\\"token operator\\\">:</span> QueryBPI<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 这里通过 Class 组件引入类型</span>\\n<span class=\\\"token comment\\\">// 如果是函数式组件，就使用 React.FC&lt;BasicProps> 声明类型</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Basic</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token operator\\\">&lt;</span>BasicProps<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// do something</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 将 state 数据导出为属性</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">select</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token literal-property property\\\">state</span><span class=\\\"token operator\\\">:</span> AppState</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> bitcoin <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">requestLoading</span><span class=\\\"token operator\\\">:</span> bitcoin<span class=\\\"token punctuation\\\">.</span>requestLoading<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">filterType</span><span class=\\\"token operator\\\">:</span> bitcoin<span class=\\\"token punctuation\\\">.</span>filterType<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">currentPrice</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>bitcoin<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"currentPrice.CNY\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 最后一步：完成 redux 和 组件的连接</span>\\n<span class=\\\"token comment\\\">// 顺便导入一下 action</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>\\n  select<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    setFilterType<span class=\\\"token punctuation\\\">,</span>\\n    queryBPI<span class=\\\"token punctuation\\\">,</span>\\n    queryBPICurrency\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>Basic<span class=\\\"token punctuation\\\">)</span>\\n\\n\"\n        }\n      }}></code></pre>\n    <p>{`到此，我们就基本上完成了一个 `}<inlineCode parentName=\"p\">{`typescript + redux + react`}</inlineCode>{` 的应用，`}<em parentName=\"p\">{`源码后续会放出`}</em>{`。`}</p>\n    <h2 {...{\n      \"id\": \"总结\"\n    }}>{`总结`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`这 ts 有什么用，限制多，运行慢，除了带给我一堆警告，还有什么作用？`}</p>\n      <p parentName=\"blockquote\">{`ts 类型声明这么复杂，还引入了这么多新概念，跟框架兼容性又这么差`}</p>\n      <p parentName=\"blockquote\">{`我就是辞职，不写前端了，也特么不用巨硬造的假 java`}</p>\n      <p parentName=\"blockquote\">{`……`}</p>\n      <p parentName=\"blockquote\">{`ts 真香，再也不想用 js 了。`}</p>\n    </blockquote>\n    <p>{`学习 `}<inlineCode parentName=\"p\">{`typescript`}</inlineCode>{` 是一段漫长的旅程，学习 ts 语法并不难，难的是框架对 ts 的支持度。以 React 为例，单单写一个 redux 版本的基础应用就踩了很多坑，甚至为了写 ts 不得不抛弃了`}<inlineCode parentName=\"p\">{`immutable.js`}</inlineCode>{`  — 一个数据不可变函数式工具，更不用提社区数量繁多的其他三方库了。`}</p>\n    <p>{`ts 不是银弹，ts 无法解决你的代码结构问题，也不能避免语法 Bug，`}<strong parentName=\"p\">{`”彼之蜜糖,吾之毒药“`}</strong>{`，当 ts 类型使用不当的时候，强行接入反而会给你造成更大的困扰。`}</p>\n    <p><strong parentName=\"p\">{`ts 适合什么场景？`}</strong></p>\n    <p>{`我个人认为:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`中大型项目，需要长期维护的项目，底层库 or 框架`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`上一条的前提是，项目主要依赖的类库对 ts 支持良好，最好有业界的先行案例`}</p>\n      </li>\n    </ol>\n    <p>{`所以用一些冷门框架或者小项目的时候我是不建议使用 ts 的，ts 没问题，框架也没问题，框架+ ts 会有很多问题。`}</p>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"前言\",\n    level: 3,\n    title: \"前言\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"一-环境配置\",\n    level: 2,\n    title: \"一. 环境配置\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"二-数据和分层\",\n    level: 2,\n    title: \"二. 数据和分层\",\n    children: [\n        {\n              id: \"1-目录结构\",\n              level: 3,\n              title: \"1. 目录结构\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"2-数据不可变性\",\n              level: 3,\n              title: \"2. 数据不可变性\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"3-store\",\n              level: 3,\n              title: \"3. Store\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"4-声明类型文件-dts\",\n              level: 3,\n              title: \"4. 声明类型文件 .d.ts\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"三-reducer\",\n    level: 2,\n    title: \"三. reducer\",\n    children: [\n        {\n              id: \"1-types\",\n              level: 3,\n              title: \"1. types\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"2-actions\",\n              level: 3,\n              title: \"2. actions\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"3reducer\",\n              level: 3,\n              title: \"3.reducer\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"四-连接组件\",\n    level: 2,\n    title: \"四. 连接组件\",\n    children: [\n        {\n              id: \"1-connect-连接\",\n              level: 3,\n              title: \"1. connect 连接\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"总结\",\n    level: 2,\n    title: \"总结\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}