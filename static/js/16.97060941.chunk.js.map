{"version":3,"sources":["routes/posts/2018-05-17-redux-best-practice/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","Object","assign","mdxType","parentName","href","id","src","alt","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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","file":"static/js/16.97060941.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"17 min read\",\"minutes\":16.545,\"time\":992700,\"words\":3309}\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><strong parentName=\"p\">{`2020–03–09 更新：`}<a parentName=\"strong\" {...{\n          \"href\": \"https://wulucxy.github.io/redux-typescript-guide/\"\n        }}>{`typescript + redux 实战 demo`}</a></strong></p>\n    <h2 {...{\n      \"id\": \"1-什么时候才需要引入-redux-\"\n    }}>{`1. 什么时候才需要引入 redux ？`}</h2>\n    <p>{`  `}<img parentName=\"p\" {...{\n        \"src\": \"https://github.com/wulucxy/blog/raw/master/src/routes/posts/2018-05-17-redux-best-practice/image/redux-pipeline.png\",\n        \"alt\": \"redux-pipeline\"\n      }}></img></p>\n    <p>{`  redux 的作者写过一篇文章，`}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367\"\n      }}>{`你也许不需要redux`}</a>{`，当你开发一个简单应用的时候，redux 不应该成为你的首选。相反，redux 约定了一套基础规范来约束开发：`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`用对象来描述应用状态 「store」`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`用对象来描述应用中的状态变化 「action」`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`用纯函数来描述处理状态变更的逻辑  `}{`[reducer]`}</p>\n        <p parentName=\"li\">{`那么，应用 redux 能够给我们带来的好处在于：`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`持久化状态数据`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`ssr`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`实现undo、redo操作`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`应用状态的时间旅行管理`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`多用户协同开发`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`开发工具扩展能力`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`强大的组合能力`}</p>\n      </li>\n    </ul>\n    <p>{`redux 提供的是一套全局的状态管理能力，如果你当前组件只需要本地 state 就能维护好应用状态，就没有必要引入 redux。只有当我们面临着以下场景：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`某个组件的状态，需要共享`}</li>\n      <li parentName=\"ul\">{`某个状态需要在任何地方都可以拿到`}</li>\n      <li parentName=\"ul\">{`一个组件需要改变全局状态`}</li>\n      <li parentName=\"ul\">{`一个组件需要改变另一个组件的状态`}</li>\n    </ul>\n    <p>{`redux 提供的解决方案就能有效地帮助我们管理数据的复杂性。`}</p>\n    <h2 {...{\n      \"id\": \"2-学习-redux-之前的预备知识\"\n    }}>{`2. 学习 redux 之前的预备知识？`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`react 应用 state 和 props 进行应用管理`}</li>\n      <li parentName=\"ul\">{`react 中应用 HOC 进行代码抽象和复用`}</li>\n      <li parentName=\"ul\">{`Context 全局对象`}</li>\n      <li parentName=\"ul\">{`Smart、 Dumb组件`}</li>\n      <li parentName=\"ul\">{`具体见`}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/hello-world.html\"\n        }}>{`官网文档`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"3-redux-的基础知识\"\n    }}>{`3. redux 的基础知识`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\"\n          }}>{`1. Redux 入门教程`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\"\n          }}>{`2. 中间件与异步操作`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\"\n          }}>{`3. react-redux`}</a></p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"4-redux-数据结构\"\n    }}>{`4. redux 数据结构`}</h2>\n    <p>{`  经常遇到的一个问题是：`}</p>\n    <p>{`  `}<strong parentName=\"p\">{`什么时候使用 Redux store，什么时候使用 React state？`}</strong></p>\n    <p>{`  `}<img parentName=\"p\" {...{\n        \"src\": \"https://github.com/wulucxy/blog/raw/master/src/routes/posts/2018-05-17-redux-best-practice/image/redux_state.png\",\n        \"alt\": \"redux_state\"\n      }}></img></p>\n    <p>{`  `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/faq/organizing-state#organizing-state-only-redux-state\"\n      }}>{`redux 官方文档给出的回答`}</a>{`是：`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`如果明确状态变更只会影响当前组件，类似于按钮状态，输入框状态，内部数据联动展示、弹窗展示等，都建议放到 state 里面进行管理`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`当以下场景回答为“是”时，redux store 就是更好的选择：`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`应用中的其他部分需要用到这部分数据吗？`}</li>\n          <li parentName=\"ul\">{`是否需要根据这部分原始数据创建衍生数据？`}</li>\n          <li parentName=\"ul\">{`这部分相同的数据是否用于驱动多个组件？`}</li>\n          <li parentName=\"ul\">{`你是否需要能够将数据恢复到某个特定的时间点（比如：在时间旅行调试的时候）？`}</li>\n          <li parentName=\"ul\">{`是否需要缓存数据？（比如：直接使用已经存在的数据，而不是重新请求）`}</li>\n        </ul>\n        <p parentName=\"li\">{`实际上，我们需要一套更通用的方案来指导如何架构redux store。按照我们的实际开发经验来看，可以将数据分为`}<inlineCode parentName=\"p\">{`ui状态`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`数据逻辑`}</inlineCode>{`:`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"ui状态\"\n    }}>{`ui状态`}</h3>\n    <p>{`  可以包括`}<inlineCode parentName=\"p\">{`弹窗展示`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`tab切换`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`下拉菜单`}</inlineCode>{`等不涉及数据逻辑的状态，通常这些更适合放在`}<inlineCode parentName=\"p\">{`React state`}</inlineCode>{`管理。`}</p>\n    <h3 {...{\n      \"id\": \"数据逻辑\"\n    }}>{`数据逻辑`}</h3>\n    <p>{` 我们可以通过`}<strong parentName=\"p\">{`数据持久度`}</strong>{`和`}<strong parentName=\"p\">{`数据消费程度`}</strong>{`来区分数据类型：`}</p>\n    <h4 {...{\n      \"id\": \"数据持久度\"\n    }}>{`数据持久度`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`快速变更型`}</li>\n      <li parentName=\"ul\">{`中等持续型`}</li>\n      <li parentName=\"ul\">{`长远稳定型`}</li>\n    </ul>\n    <p>{` `}<strong parentName=\"p\">{`快速变更型`}</strong>{`，这类数据往往代表着短时间内快速变更，比如文本框内容可能随着用户输入持续变化，或者快速拖动变更位置等，这类数据更加适合维护在state中。`}</p>\n    <p>{` `}<strong parentName=\"p\">{`中等持续性`}</strong>{`，当用户浏览或者使用应用时，在刷新页面之前数据保持相对稳定，比如ajax获取数据，编辑form表单等，这类数据比较通用，可能被其他组件所应用。这类数据适合通过redux store维护，再通过connect被组件使用。`}</p>\n    <p>{` `}<strong parentName=\"p\">{`长远稳定型`}</strong>{`，指在页面多次刷新或者多次访问期间都保持不变的数据，这类数据通常不会放在redux里面维护，一般会放到localstorage或者db里面。`}</p>\n    <h4 {...{\n      \"id\": \"数据消费程度\"\n    }}>{`数据消费程度`}</h4>\n    <p>{`  数据特性体现在消费层面，即有多少组件需要使用。越多组件消费的数据，就应该放在 redux store 里面维护，反之，当数据只服务于单一组件时，由 React State 维护就更加合理。`}</p>\n    <p>{`  `}<strong parentName=\"p\">{`最后，什么情况该使用哪种数据管理方式，是 React 维护 state 还是 Redux 集中管理，这个讨论不会有唯一定论。这需要开发者对于 React，Redux 深入理解，并结合场景需求完成选择。`}</strong></p>\n    <h2 {...{\n      \"id\": \"5-fsa-设计规范\"\n    }}>{`5. FSA 设计规范`}</h2>\n    <p>{`redux 设计非常精简，并没有追求大而全。在具体实践上，官方并没有约定一套通用的标准，在开发社区里面有很多的约定方案，其中最广为接受的方案就是`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/redux-utilities/flux-standard-action\"\n      }}>{`FSA`}</a>{`，全称是 `}<inlineCode parentName=\"p\">{`flux-standard-action`}</inlineCode>{`。`}</p>\n    <p><inlineCode parentName=\"p\">{`FSA`}</inlineCode>{` 的设计理念在于规范 `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{` 的标准写法，让开发者都遵循同一套规范，简单友好可依赖。具体的标准如下：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`action`}</inlineCode>{` 是一个纯对象`}</li>\n      <li parentName=\"ul\">{`必须要有 `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` 字段，来表示 action 类型`}</li>\n      <li parentName=\"ul\">{`至少要有 `}<inlineCode parentName=\"li\">{`error`}</inlineCode>{`，`}<inlineCode parentName=\"li\">{`payload`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`meta`}</inlineCode>{` 属性之一`}</li>\n      <li parentName=\"ul\">{`若 `}<inlineCode parentName=\"li\">{`action`}</inlineCode>{` 报错，`}<inlineCode parentName=\"li\">{`error`}</inlineCode>{` 必须为 true`}</li>\n      <li parentName=\"ul\">{`不能有`}<inlineCode parentName=\"li\">{`type`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`error`}</inlineCode>{`，`}<inlineCode parentName=\"li\">{`payload`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`meta`}</inlineCode>{` 之外的其他属性 `}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"type\"\n    }}>{`type`}</h3>\n    <p>{`[必选]`}{` `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` 属性必须是字符串类型常量，通过 `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` 可以将 `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`reducer`}</inlineCode>{` 串联起来。`}</p>\n    <h3 {...{\n      \"id\": \"payload\"\n    }}>{`payload`}</h3>\n    <p>{`[可选]`}{` payload 代表 action 存放的内容，可以是任意类型的数据。当`}<inlineCode parentName=\"p\">{`error`}</inlineCode>{`值为 true 时，此时 payload 应当是一个 Error 对象`}</p>\n    <h3 {...{\n      \"id\": \"error\"\n    }}>{`error`}</h3>\n    <p>{`[可选]`}{` error 当取值为 true 时，此时 action 发生了错误`}</p>\n    <h3 {...{\n      \"id\": \"meta\"\n    }}>{`meta`}</h3>\n    <p>{`[可选]`}{` action 的额外信息，典型使用场景就是当 action payload 是一个 promise 时，通过 meta 来传递相应参数。`}</p>\n    <p>{`正式基于相同的 action 架构，`}<inlineCode parentName=\"p\">{`redux-actions`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`redux-promise-middle`}</inlineCode>{` 都是基于 `}<inlineCode parentName=\"p\">{`FSA`}</inlineCode>{` 架构的 action 处理工具。`}</p>\n    <h2 {...{\n      \"id\": \"6-redux-store-设计\"\n    }}>{`6. redux store 设计`}</h2>\n    <p>{`redux Store 是整个应用的核心，决定了应用如何渲染，渲染的结果是什么。所以设计好 redux store 是重中之重。`}</p>\n    <p>{`在设计 redux store 之前，我们先聊一下应用的架构。说到底，store 设计是需要服务应用架构的，离开项目需求单独讨论 store 是无本之木。`}</p>\n    <p>{`目前信贷中后台页面都是基于 papaya 的单页架构，单页架构又分为两种：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A：每个页面都是一个独立的模块，页面切换会刷新当前页面，页面之间不需要共享全局状态（流程引擎）`}</li>\n      <li parentName=\"ul\">{`B：纯粹单页应用，多个模块共同组成一个页面，模块切换不会刷新当前页面，需要共享全局状态（机器学习）`}</li>\n    </ul>\n    <p>{`这两类应用所维护的 store 架构就需要分开设计。`}</p>\n    <p><strong parentName=\"p\">{`从横向来看`}</strong>{`，「A应用」就适合于按「Page 页面」进行分类，也不需要抽取共享状态用于页面间分享：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`- page1\n  - module1\n  - module2\n  - module3\n- page2\n`}</code></pre>\n    <p>{`「B应用」更适合于按照「Feature 功能」进行分类，模块之间需要抽象出全局共享状态：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`- app（全局共享状态）\n- routing（路由数据）\n- module1\n- module2\n`}</code></pre>\n    <p><strong parentName=\"p\">{`从纵向来看`}</strong>{`，store 设计通用设计可以参考：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`store 设计尽量扁平化，store 里面 state 结构不要超过 3 层，数据之间可以通过 `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` 进行连接`}</li>\n      <li parentName=\"ul\">{`多个模块之间需要共享的数据，放到父模块存储`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"7-reducer-设计\"\n    }}>{`7. reducer 设计`}</h2>\n    <p>{`redux 官方示范给的 reducer 写法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">todos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> action</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token constant\\\">ADD_TODO</span><span class=\\\"token operator\\\">:</span>\\n      <span class=\\\"token comment\\\">// return state1</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token constant\\\">TOGGLE_TODO</span><span class=\\\"token operator\\\">:</span>\\n      <span class=\\\"token comment\\\">// return state2</span>\\n    <span class=\\\"token keyword\\\">default</span><span class=\\\"token operator\\\">:</span>\\n      <span class=\\\"token keyword\\\">return</span> state\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\"\n        }\n      }}></code></pre>\n    <p>{`这种写法很好，但是不够精简，我们完全可以代替以 对象 写法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> typeToReducer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'type-to-reducer'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> todosReducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">typeToReducer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">ADD_TODO</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">state<span class=\\\"token punctuation\\\">,</span> action</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>state1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">TOGGLE_TODO</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">state<span class=\\\"token punctuation\\\">,</span> action</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>state2<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`不仅代码更加精简，语义性也变得更强了，并且还减少了维护成本，一举三得。`}</p>\n    <h2 {...{\n      \"id\": \"8-redux-actions\"\n    }}>{`8. redux actions`}</h2>\n    <p>{`基于 `}<inlineCode parentName=\"p\">{`FSA`}</inlineCode>{` 架构，我们可以产出两套`}<inlineCode parentName=\"p\">{`action`}</inlineCode>{` 方案：`}</p>\n    <h3 {...{\n      \"id\": \"actioncreator-写法\"\n    }}>{`actionCreator 写法`}</h3>\n    <p><inlineCode parentName=\"p\">{`actionCreator`}</inlineCode>{` 写法接近于原生 action 写法:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// 一个标准的actionCreator 同步写法</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">setWorkSpaceRectData</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">value</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> types<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SET_WORKSPACE_RECT_DATA</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">payload</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>value<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// 一个标准的actionCreator 异步写法</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">queryAppList</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">userName</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> types<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">QUERY_APP_LIST</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">payload</span><span class=\\\"token operator\\\">:</span> axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">/serving/users/apps</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">meta</span><span class=\\\"token operator\\\">:</span> userName\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"redux-action-写法\"\n    }}>{`redux-action 写法`}</h3>\n    <p>{`社区提供另外一个简化action写法的解决方案，`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/redux-utilities/redux-actions\"\n      }}>{`redux-actions`}</a>{`，基于 redux-actions 对上述 action 做下改造：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createAction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-actions'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> setWorkSpaceRectData <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createAction</span><span class=\\\"token punctuation\\\">(</span>\\n  types<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SET_WORKSPACE_RECT_DATA</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token parameter\\\">value</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>value<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> queryAppList <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createAction</span><span class=\\\"token punctuation\\\">(</span>\\n  types<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">QUERY_APP_LIST</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token parameter\\\">userName</span> <span class=\\\"token operator\\\">=></span> axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">/serving/users/apps</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token parameter\\\">userName</span> <span class=\\\"token operator\\\">=></span> userName\\n<span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`个人还是偏向原生写法，redux-action 将 action 属性封装以后反而加大了理解难度。`}</p>\n    <h2 {...{\n      \"id\": \"9-redux-中间件\"\n    }}>{`9. redux 中间件`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016092002.jpg\",\n        \"alt\": \"redux-middleware\"\n      }}></img></p>\n    <p>{`redux 的中间件模型类似于 koa 的洋葱模型，对`}<inlineCode parentName=\"p\">{`store.dispatch`}</inlineCode>{`方法进行改造，就可以添加功能，具体原理参考`}<a parentName=\"p\" {...{\n        \"href\": \"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\"\n      }}>{`2. 中间件与异步操作`}</a>{`。这里只是推荐一些常用的中间件。`}</p>\n    <h3 {...{\n      \"id\": \"91-redux-thunk\"\n    }}>{`9.1 redux-thunk`}</h3>\n    <p>{`redux 原生设计只支持同步 Action，redux-thunk 的原理是 action 进行拦截判断，如果 thunk 发现 action 类型是函数，就在action 回调里面再触发 action，这也是 redux 异步方案的通用解决方案。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getDataAction</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">id</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 1. 这里 生成的action 是一个函数，通过thunk 包装以后，实际触发的action 是 action 2</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">dispatch<span class=\\\"token punctuation\\\">,</span> getState</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 2. 这里才是真正触发的action</span>\\n    <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">GET_DATA</span><span class=\\\"token punctuation\\\">,</span> \\n      <span class=\\\"token literal-property property\\\">payload</span><span class=\\\"token operator\\\">:</span> id\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nstore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getDataAction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"92-redux-promise-middleware\"\n    }}>{`9.2 redux-promise-middleware`}</h3>\n    <p>{`redux-thunk 能够实现异步action，但是无法实现异步 action 的串联`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token function\\\">action1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">action2</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`并且`}<inlineCode parentName=\"p\">{`redux-thunk`}</inlineCode>{`写法非常冗余，需要针对异步action 手工添加状态信息，`}<inlineCode parentName=\"p\">{`redux-promise-middleware`}</inlineCode>{` 则会自动生成\n`}<inlineCode parentName=\"p\">{`actionType_\\${status}`}</inlineCode>{`的 type 类型，结合`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tomatau/type-to-reducer\"\n      }}>{`type-to-reducer`}</a>{`就能实现很好地代码优化。`}</p>\n    <h3 {...{\n      \"id\": \"93-redux-logger\"\n    }}>{`9.3 redux-logger`}</h3>\n    <p>{`redux-logger 能够将 action 打印到控制台，非常方便 debug。`}</p>\n    <h3 {...{\n      \"id\": \"94-redux-devtools-extension\"\n    }}>{`9.4 redux-devtools-extension`}</h3>\n    <p>{`redux 作者维护的结合浏览器插件的开发神器。`}</p>\n    <h2 {...{\n      \"id\": \"qa\"\n    }}>{`QA`}</h2>\n    <p>{`1 是否允许按需 connect？`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`允许。具体还是从业务层面需求出发，如果当前组件我们认为其更加适合作为一个容器型组件，也就是跟业务数据有很强的关联，这个时候connect 就是比较好的选择，反之，如果当前组件更偏向于展示型，那么数据来源更合适从父组件获取，而非 connect。`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`关于何时 connect 比较合适，目前无法提供一套通用的解决方案，还是需要从实际业务中去判断，一个原则是 当需要跟业务数据强关联，就合适 connect，反之如果组件更适合作为展示组件，就更适合从父组件上获取数据。`}</p>\n    </blockquote>\n    <p>{`2 目录结构划分，是按照action，reducer，constant 按功能进行页面区分，还是支持像 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/erikras/ducks-modular-redux\"\n      }}>{`ducks`}</a>{` 将所有文件统一管理？`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"https://github.com/erikras/ducks-modular-redux\"\n        }}>{`ducks`}</a>{`写法推崇将 actionCreator，reducer，constant 都写到同一个文件里，优点在于减少页面切换。但 redux 作者并不赞同，因为这种写法会给用户造成 action 和 reducer 是一一对应的错误，并且当 action 需要共享 reducer 时，无法做到抽象。`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`结论`}</strong>{`，优先推荐使用 ducks 写法，如果有复杂数据处理场景，建议采用按功能区分的写法。`}</p>\n    </blockquote>\n    <p>{`3 immutable 在哪里 toJS？`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`immutable 在 connect 里面 toJS 是一种反模式，并且在展示组件（Dumb）里面是否应用 immutable 对象，`}<a parentName=\"p\" {...{\n          \"href\": \"https://redux.js.org/recipes/using-immutable.js-with-redux#never-use-immutable-js-in-your-dumb-components\"\n        }}>{`官方并不推荐`}</a>{`，实际上如果组件之间传递的是 immutable 对象对性能提升有一定的帮助。`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`结论`}</strong>{`，toJS 建议按需来转，比如当跟服务端进行数据交互时就应该执行 toJS 操作。另外，展示组件 推荐传递非 immutalble 对象，当需要性能优化时，可以考虑传递 immutable 对象`}</p>\n    </blockquote>\n    <p>{`4 一个 action 是否需要聚合所有操作？`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`action 聚合最合适的时候应该交由 view 层控制，每个 action 维护的都是最小单元的数据操作逻辑。通过`}<inlineCode parentName=\"p\">{`redux-promise-middleware`}</inlineCode>{` 可以实现 异步action 串联和聚合效果。`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`另外，即使这种情况下，因为无法保证所有 action 都能返回 promise，所以`}<strong parentName=\"p\">{`不建议移除 redux-thunk`}</strong>{`。`}</p>\n    </blockquote>\n    <p>{`5 目前在papaya 中使用的 FSA、 type-to-reducer、ducks 这种是否为强制规范？`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`FSA 是目前 redux 社区推荐的方案，建议使用，type-to-reducer 能够帮助书写更优雅的reducer，并且是对 redux-promise-middleware 的优化写法，ducks 可以减少文件维护成本。`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`结论`}</strong>{`，推荐使用FSA、type-to-reducer、ducks 等写法。`}</p>\n    </blockquote>\n    <p>{`6 哪种情况数据应该放在 state 中，哪种应该放在 store 中？`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`参考 `}{`[redux数据结构]`}{`(#4. redux 数据结构)`}</p>\n    </blockquote>\n    <p>{`7 什么情况下使用 action , 什么情况下使用静态方法？`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`如果涉及到后端请求或前端查询数据，即使不用关心action操作返回的值，也建议使用action，因为后续如果需求改动或者数据变更，有更好的可扩展性。静态方法适合于跟数据逻辑无关的 ui 状态。`}</p>\n    </blockquote>\n    <p>{`8 如何组织一个前端业务操作流，例如：执行了发货操作，操作成功，执行查询操作，再执行 xxx 操作。。。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`在 React 层来调用相应 action：`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">mail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res2</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// something else</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`9 promiseMiddleware 的最佳实践和反模式？`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"https://github.com/pburtchaell/redux-promise-middleware/tree/master/docs/guides\"\n        }}>{`官方文档`}</a></p>\n    </blockquote>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"1-什么时候才需要引入-redux-\",\n    level: 2,\n    title: \"1. 什么时候才需要引入 redux ？\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"2-学习-redux-之前的预备知识\",\n    level: 2,\n    title: \"2. 学习 redux 之前的预备知识？\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"3-redux-的基础知识\",\n    level: 2,\n    title: \"3. redux 的基础知识\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"4-redux-数据结构\",\n    level: 2,\n    title: \"4. redux 数据结构\",\n    children: [\n        {\n              id: \"ui状态\",\n              level: 3,\n              title: \"ui状态\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"数据逻辑\",\n              level: 3,\n              title: \"数据逻辑\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"5-fsa-设计规范\",\n    level: 2,\n    title: \"5. FSA 设计规范\",\n    children: [\n        {\n              id: \"type\",\n              level: 3,\n              title: \"type\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"payload\",\n              level: 3,\n              title: \"payload\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"error\",\n              level: 3,\n              title: \"error\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"meta\",\n              level: 3,\n              title: \"meta\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"6-redux-store-设计\",\n    level: 2,\n    title: \"6. redux store 设计\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"7-reducer-设计\",\n    level: 2,\n    title: \"7. reducer 设计\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"8-redux-actions\",\n    level: 2,\n    title: \"8. redux actions\",\n    children: [\n        {\n              id: \"actioncreator-写法\",\n              level: 3,\n              title: \"actionCreator 写法\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"redux-action-写法\",\n              level: 3,\n              title: \"redux-action 写法\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"9-redux-中间件\",\n    level: 2,\n    title: \"9. redux 中间件\",\n    children: [\n        {\n              id: \"91-redux-thunk\",\n              level: 3,\n              title: \"9.1 redux-thunk\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"92-redux-promise-middleware\",\n              level: 3,\n              title: \"9.2 redux-promise-middleware\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"93-redux-logger\",\n              level: 3,\n              title: \"9.3 redux-logger\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"94-redux-devtools-extension\",\n              level: 3,\n              title: \"9.4 redux-devtools-extension\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"qa\",\n    level: 2,\n    title: \"QA\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}